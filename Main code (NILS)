#!/usr/bin/env python
# coding: utf-8

# In[1]:


pip install pulp


# In[2]:


# Define Sets and Indices

import random

L = [1, 2, 3]  # Set of commodities
J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
M = [1, 2, 3, 4]  # Set of manufacturing facilities

# Define Parameters (Randomly generated for demonstration)
beta_ml = {(1, 1): 9.4763, (1, 2): 6.4596, (1, 3): 10.9731, (2, 1): 5.8111, (2, 2): 4.57384, (2, 3): 2.3311,
           (3, 1): 3.6137, (3, 2): 4.8814, (3, 3): 3.95582, (4, 1): 1.5722, (4, 2): 7.7336, (4, 3): 9.3042}
rho_m = {1: 109.2, 2: 106.5, 3: 116, 4: 108}

delta_jl = {(1, 1): 20, (1, 2): 1, (1, 3): 2, (2, 1): 5, (2, 2): 0, (2, 3): 2, (3, 1): 23, (3, 2): 0, (3, 3): 1,
            (4, 1): 8, (4, 2): 1, (4, 3): 0, (5, 1): 3, (5, 2): 11, (5, 3): 10, (6, 1): 8, (6, 2): 7, (6, 3): 2,
            (7, 1): 1, (7, 2): 1, (7, 3): 17, (8, 1): 8, (8, 2): 4, (8, 3): 1, (9, 1): 3, (9, 2): 2, (9, 3): 1,
            (10, 1): 2, (10, 2): 12, (10, 3): 0, (11, 1): 2, (11, 2): 3, (11, 3): 7, (12, 1): 10, (12, 2): 3,
            (12, 3): 2, (13, 1): 13, (13, 2): 9, (13, 3): 2, (14, 1): 2, (14, 2): 2, (14, 3): 1, (15, 1): 8,
            (15, 2): 2, (15, 3): 6, (16, 1): 18, (16, 2): 2, (16, 3): 2, (17, 1): 1, (17, 2): 1, (17, 3): 5,
            (18, 1): 10, (18, 2): 3, (18, 3): 4, (19, 1): 0, (19, 2): 0, (19, 3): 1, (20, 1): 10, (20, 2): 12,
            (20, 3): 0, (21, 1): 4, (21, 2): 0, (21, 3): 1, (22, 1): 2, (22, 2): 0, (22, 3): 4, (23, 1): 12,
            (23, 2): 1, (23, 3): 1, (24, 1): 1, (24, 2): 0, (24, 3): 0, (25, 1): 2, (25, 2): 2, (25, 3): 11,
            (26, 1): 8, (26, 2): 0, (26, 3): 7, (27, 1): 6, (27, 2): 0, (27, 3): 1, (28, 1): 4, (28, 2): 9,
            (28, 3): 8, (29, 1): 11, (29, 2): 2, (29, 3): 2, (30, 1): 1, (30, 2): 1, (30, 3): 0, (31, 1): 4,
            (31, 2): 8, (31, 3): 3, (32, 1): 2, (32, 2): 10, (32, 3): 3, (33, 1): 1, (33, 2): 0, (33, 3): 8,
            (34, 1): 1, (34, 2): 1, (34, 3): 1, (35, 1): 4, (35, 2): 0, (35, 3): 1, (36, 1): 3, (36, 2): 4,
            (36, 3): 1, (37, 1): 4, (37, 2): 3, (37, 3): 3, (38, 1): 8, (38, 2): 1, (38, 3): 3, (39, 1): 2,
            (39, 2): 0, (39, 3): 2, (40, 1): 2, (40, 2):0, (40, 3): 1 }

epsilon_ml = {(1, 1): 40.5, (1, 2): 155.61, (1, 3): 253.89, (2, 1): 68.4677, (2, 2): 75.7058, (2, 3): 344.882,
              (3, 1): 34.1091, (3, 2): 212.987, (3, 3): 240.177, (4, 1): 148.035, (4, 2): 312.142, (4, 3): 68.519}

s_m_max = {1: 400, 2: 500, 3: 800, 4: 900}
pi_m_max = {1: 370, 2: 370, 3: 402, 4: 523}

mu_l = {1:2, 2:5, 3:4} #raw material required for each commodity

    # Sample data (you should replace this with your actual data)
H = [41, 42, 43, 44, 45, 46, 47, 48]  # Set of hubs
K1 = [1, 2]  # Set of small size vehicles
K2 = [3, 4]  # Set of large size trucks

K = K1 + K2  # Vehicles in the supply chain
I = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]  # Nodes in the supply chain (consider node 0 as the depot)
#    for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]:
#        I.remove(i)
# Define other data (replace these with your actual values)
p_l = {1: 40, 2: 20, 3: 25} # Price sale per unit associated with each commodity l in L
r_k = {1: 20, 2: 20, 3: 50, 4: 50}  # Rental cost for vehicle k in K

d_ij1 = {
    (1, 1): 0.0, (1, 2): 54.72, (1, 3): 81.0, (1, 4): 8.64, (1, 5): 36.46, (1, 6): 65.21, (1, 7): 20.04, (1, 8): 11.52, (1, 9): 40.97, (1, 10): 61.77, (1, 11): 58.38, (1, 12): 76.53, (1, 13): 46.76, (1, 14): 7.51, (1, 15): 47.7, (1, 16): 48.06, (1, 17): 62.81, (1, 18): 29.39, (1, 19): 34.93, (1, 20): 75.5, (1, 21): 27.16, (1, 22): 100.46, (1, 23): 34.83, (1, 24): 15.5, (1, 25): 81.31, (1, 26): 38.68, (1, 27): 15.4, (1, 28): 33.04, (1, 29): 28.45, (1, 30): 33.59, (1, 31): 40.93, (1, 32): 38.0, (1, 33): 23.94, (1, 34): 21.69, (1, 35): 120.74, (1, 36): 54.33, (1, 37): 56.71, (1, 38): 27.37, (1, 39): 47.96, (1, 40): 48.95, (1, 41): 27.29, (1, 42): 26.18, (1, 43): 34.93, (1, 44): 49.72, (1, 45): 12.87, (1, 46): 83.48, (1, 47): 60.21, (1, 48): 81.21, (1, 0): 91.81,
    (2, 1): 54.72, (2, 2): 0.0, (2, 3): 126.38, (2, 4): 61.89, (2, 5): 25.33, (2, 6): 99.73, (2, 7): 37.73, (2, 8): 60.72, (2, 9): 34.26, (2, 10): 71.56, (2, 11): 72.51, (2, 12): 31.38, (2, 13): 96.33, (2, 14): 47.22, (2, 15): 100.31, (2, 16): 61.9, (2, 17): 112.97, (2, 18): 65.43, (2, 19): 57.1, (2, 20): 130.14, (2, 21): 74.15, (2, 22): 140.06, (2, 23): 84.65, (2, 24): 65.21, (2, 25): 134.26, (2, 26): 20.8, (2, 27): 60.08, (2, 28): 21.9, (2, 29): 73.47, (2, 30): 22.31, (2, 31): 86.0, (2, 32): 88.33, (2, 33): 43.51, (2, 34): 76.4, (2, 35): 174.1, (2, 36): 92.93, (2, 37): 104.81, (2, 38): 32.83, (2, 39): 91.21, (2, 40): 87.54, (2, 41): 80.63, (2, 42): 78.1, (2, 43): 85.66, (2, 44): 15.92, (2, 45): 59.82, (2, 46): 80.81, (2, 47): 5.74, (2, 48): 66.32, (2, 0): 140.02,
    (3, 1): 81.0, (3, 2): 126.38, (3, 3): 0.0, (3, 4): 79.96, (3, 5): 115.78, (3, 6): 121.12, (3, 7): 100.28, (3, 8): 70.29, (3, 9): 121.87, (3, 10): 137.38, (3, 11): 132.73, (3, 12): 154.22, (3, 13): 86.53, (3, 14): 86.29, (3, 15): 39.87, (3, 16): 124.93, (3, 17): 23.16, (3, 18): 101.14, (3, 19): 112.18, (3, 20): 53.14, (3, 21): 54.44, (3, 22): 24.95, (3, 23): 46.36, (3, 24): 65.76, (3, 25): 34.81, (3, 26): 105.7, (3, 27): 68.67, (3, 28): 106.04, (3, 29): 54.13, (3, 30): 110.44, (3, 31): 41.05, (3, 32): 43.64, (3, 33): 82.88, (3, 34): 67.12, (3, 35): 62.47, (3, 36): 109.76, (3, 37): 24.74, (3, 38): 128.4, (3, 39): 108.27, (3, 40): 142.66, (3, 41): 119.71, (3, 42): 125.16, (3, 43): 117.21, (3, 44): 138.52, (3, 45): 90.47, (3, 46): 163.08, (3, 47): 124.21, (3, 48): 148.26, (3, 0): 174.62,
    (4, 1): 8.64, (4, 2): 61.89, (4, 3): 79.96, (4, 4): 0.0, (4, 5): 41.57, (4, 6): 58.01, (4, 7): 25.24, (4, 8): 15.55, (4, 9): 43.99, (4, 10): 59.09, (4, 11): 52.32, (4, 12): 68.42, (4, 13): 39.94, (4, 14): 14.19, (4, 15): 51.95, (4, 16): 43.62, (4, 17): 53.77, (4, 18): 22.85, (4, 19): 25.12, (4, 20): 59.71, (4, 21): 19.88, (4, 22): 92.19, (4, 23): 26.27, (4, 24): 7.68, (4, 25): 77.58, (4, 26): 30.08, (4, 27): 8.71, (4, 28): 26.13, (4, 29): 18.82, (4, 30): 20.54, (4, 31): 30.14, (4, 32): 28.04, (4, 33): 14.68, (4, 34): 16.55, (4, 35): 113.44, (4, 36): 48.31, (4, 37): 49.43, (4, 38): 18.5, (4, 39): 37.12, (4, 40): 40.9, (4, 41): 18.65, (4, 42): 18.49, (4, 43): 21.92, (4, 44): 44.78, (4, 45): 4.6, (4, 46): 74.08, (4, 47): 45.15, (4, 48): 70.12, (4, 0): 84.36,
    (5, 1): 36.46, (5, 2): 25.33, (5, 3): 115.78, (5, 4): 41.57, (5, 5): 0.0, (5, 6): 76.37, (5, 7): 12.73, (5, 8): 35.78, (5, 9): 10.98, (5, 10): 50.35, (5, 11): 49.94, (5, 12): 47.17, (5, 13): 70.6, (5, 14): 22.52, (5, 15): 75.41, (5, 16): 24.14, (5, 17): 86.02, (5, 18): 47.88, (5, 19): 31.63, (5, 20): 116.53, (5, 21): 53.43, (5, 22): 126.18, (5, 23): 63.88, (5, 24): 48.62, (5, 25): 105.23, (5, 26): 5.65, (5, 27): 36.42, (5, 28): 19.85, (5, 29): 50.76, (5, 30): 24.4, (5, 31): 63.77, (5, 32): 64.8, (5, 33): 30.26, (5, 34): 61.13, (5, 35): 159.9, (5, 36): 71.62, (5, 37): 84.74, (5, 38): 31.64, (5, 39): 79.06, (5, 40): 68.4, (5, 41): 71.33, (5, 42): 68.8, (5, 43): 66.19, (5, 44): 11.71, (5, 45): 32.84, (5, 46): 74.73, (5, 47): 39.1, (5, 48): 41.51, (5, 0): 131.94,
    (6, 1): 65.21, (6, 2): 99.73, (6, 3): 121.12, (6, 4): 58.01, (6, 5): 76.37, (6, 6): 0.0, (6, 7): 64.31, (6, 8): 61.11, (6, 9): 84.19, (6, 10): 74.21, (6, 11): 29.98, (6, 12): 49.79, (6, 13): 104.84, (6, 14): 53.18, (6, 15): 16.49, (6, 16): 78.49, (6, 17): 71.87, (6, 18): 89.31, (6, 19): 96.74, (6, 20): 79.77, (6, 21): 97.82, (6, 22): 64.85, (6, 23): 14.43, (6, 24): 12.37, (6, 25): 46.31, (6, 26): 64.24, (6, 27): 53.19, (6, 28): 57.86, (6, 29): 86.17, (6, 30): 53.84, (6, 31): 66.79, (6, 32): 89.39, (6, 33): 71.15, (6, 34): 80.99, (6, 35): 58.07, (6, 36): 30.56, (6, 37): 111.63, (6, 38): 77.54, (6, 39): 43.07, (6, 40): 52.68, (6, 41): 39.97, (6, 42): 36.4, (6, 43): 86.07, (6, 44): 99.51, (6, 45): 72.52, (6, 46): 32.47, (6, 47): 94.06, (6, 48): 109.48, (6, 0): 58.69,
    (7, 1): 20.04, (7, 2): 37.73, (7, 3): 100.28, (7, 4): 25.24, (7, 5): 12.73, (7, 6): 64.31, (7, 7): 0.0, (7, 8): 24.0, (7, 9): 13.63, (7, 10): 39.86, (7, 11): 41.61, (7, 12): 32.8, (7, 13): 55.46, (7, 14): 15.95, (7, 15): 68.21, (7, 16): 31.16, (7, 17): 75.48, (7, 18): 34.88, (7, 19): 19.98, (7, 20): 104.94, (7, 21): 42.87, (7, 22): 118.03, (7, 23): 54.63, (7, 24): 38.38, (7, 25): 90.86, (7, 26): 12.89, (7, 27): 28.3, (7, 28): 19.5, (7, 29): 47.62, (7, 30): 16.6, (7, 31): 55.45, (7, 32): 59.93, (7, 33): 18.19, (7, 34): 51.9, (7, 35): 148.62, (7, 36): 66.28, (7, 37): 77.18, (7, 38): 16.68, (7, 39): 72.61, (7, 40): 59.71, (7, 41): 57.63, (7, 42): 57.05, (7, 43): 55.66, (7, 44): 8.95, (7, 45): 31.69, (7, 46): 72.22, (7, 47): 33.57, (7, 48): 31.93, (7, 0): 121.26,
    (8, 1): 11.52, (8, 2): 60.72, (8, 3): 70.29, (8, 4): 15.55, (8, 5): 35.78, (8, 6): 61.11, (8, 7): 24.0, (8, 8): 0.0, (8, 9): 32.57, (8, 10): 49.45, (8, 11): 44.81, (8, 12): 46.95, (8, 13): 45.27, (8, 14): 8.68, (8, 15): 57.47, (8, 16): 44.2, (8, 17): 48.24, (8, 18): 11.02, (8, 19): 15.03, (8, 20): 59.56, (8, 21): 23.77, (8, 22): 88.63, (8, 23): 23.21, (8, 24): 9.39, (8, 25): 67.96, (8, 26): 29.57, (8, 27): 10.62, (8, 28): 23.26, (8, 29): 22.45, (8, 30): 16.54, (8, 31): 29.89, (8, 32): 30.94, (8, 33): 17.02, (8, 34): 14.83, (8, 35): 113.61, (8, 36): 50.76, (8, 37): 54.94, (8, 38): 10.64, (8, 39): 38.25, (8, 40): 36.95, (8, 41): 25.4, (8, 42): 24.92, (8, 43): 33.56, (8, 44): 43.77, (8, 45): 8.92, (8, 46): 74.95, (8, 47): 48.53, (8, 48): 70.25, (8, 0): 90.95,
    (9, 1): 40.97, (9, 2): 34.26, (9, 3): 121.87, (9, 4): 43.99, (9, 5): 10.98, (9, 6): 84.19, (9, 7): 13.63, (9, 8): 32.57, (9, 9): 0.0, (9, 10): 39.0, (9, 11): 39.77, (9, 12): 43.95, (9, 13): 58.3, (9, 14): 10.98, (9, 15): 65.21, (9, 16): 18.03, (9, 17): 74.13, (9, 18): 37.03, (9, 19): 12.4, (9, 20): 121.56, (9, 21): 54.67, (9, 22): 135.93, (9, 23): 72.53, (9, 24): 52.09, (9, 25): 110.76, (9, 26): 15.02, (9, 27): 29.87, (9, 28): 6.91, (9, 29): 38.79, (9, 30): 11.02, (9, 31): 67.47, (9, 32): 71.15, (9, 33): 8.61, (9, 34): 61.34, (9, 35): 143.03, (9, 36): 67.7, (9, 37): 70.7, (9, 38): 4.25, (9, 39): 80.52, (9, 40): 74.91, (9, 41): 68.23, (9, 42): 67.69, (9, 43): 66.48, (9, 44): 6.12, (9, 45): 45.01, (9, 46): 85.48, (9, 47): 49.53, (9, 48): 44.95, (9, 0): 125.18,
    (10, 1): 61.77, (10, 2): 71.56, (10, 3): 137.38, (10, 4): 59.09, (10, 5): 50.35, (10, 6): 74.21, (10, 7): 39.86, (10, 8): 49.45, (10, 9): 39.0, (10, 10): 0.0, (10, 11): 44.21, (10, 12): 86.32, (10, 13): 24.9, (10, 14): 57.49, (10, 15): 91.23, (10, 16): 52.65, (10, 17): 78.6, (10, 18): 31.22, (10, 19): 63.67, (10, 20): 98.19, (10, 21): 82.92, (10, 22): 98.67, (10, 23): 66.27, (10, 24): 66.11, (10, 25): 93.4, (10, 26): 56.95, (10, 27): 74.25, (10, 28): 54.57, (10, 29): 86.86, (10, 30): 57.61, (10, 31): 83.08, (10, 32): 96.97, (10, 33): 68.45, (10, 34): 68.61, (10, 35): 172.55, (10, 36): 84.67, (10, 37): 74.33, (10, 38): 62.44, (10, 39): 91.51, (10, 40): 68.86, (10, 41): 84.43, (10, 42): 83.03, (10, 43): 78.66, (10, 44): 41.3, (10, 45): 58.45, (10, 46): 110.38, (10, 47): 69.14, (10, 48): 72.81, (10, 0): 158.45,
    (11, 1): 58.38, (11, 2): 72.51, (11, 3): 132.73, (11, 4): 52.32, (11, 5): 49.94, (11, 6): 29.98, (11, 7): 41.61, (11, 8): 44.81, (11, 9): 39.77, (11, 10): 44.21, (11, 11): 0.0, (11, 12): 25.34, (11, 13): 71.86, (11, 14): 41.49, (11, 15): 15.67, (11, 16): 55.67, (11, 17): 54.12, (11, 18): 58.16, (11, 19): 76.56, (11, 20): 84.33, (11, 21): 74.77, (11, 22): 32.46, (11, 23): 29.06, (11, 24): 41.82, (11, 25): 16.02, (11, 26): 52.19, (11, 27): 41.45, (11, 28): 54.81, (11, 29): 50.66, (11, 30): 57.63, (11, 31): 16.24, (11, 32): 47.14, (11, 33): 60.94, (11, 34): 47.32, (11, 35): 47.82, (11, 36): 83.67, (11, 37): 16.48, (11, 38): 75.3, (11, 39): 15.6, (11, 40): 37.21, (11, 41): 16.53, (11, 42): 17.08, (11, 43): 58.08, (11, 44): 54.22, (11, 45): 50.05, (11, 46): 50.74, (11, 47): 78.12, (11, 48): 32.29, (11, 0): 138.36,
    (12, 1): 76.53, (12, 2): 31.38, (12, 3): 154.22, (12, 4): 68.42, (12, 5): 47.17, (12, 6): 49.79, (12, 7): 32.8, (12, 8): 46.95, (12, 9): 43.95, (12, 10): 86.32, (12, 11): 25.34, (12, 12): 0.0, (12, 13): 80.95, (12, 14): 31.09, (12, 15): 25.73, (12, 16): 92.21, (12, 17): 42.48, (12, 18): 68.92, (12, 19): 100.22, (12, 20): 75.56, (12, 21): 109.05, (12, 22): 49.9, (12, 23): 49.39, (12, 24): 38.53, (12, 25): 40.5, (12, 26): 45.71, (12, 27): 56.1, (12, 28): 60.62, (12, 29): 88.64, (12, 30): 63.68, (12, 31): 50.36, (12, 32): 62.46, (12, 33): 34.65, (12, 34): 57.41, (12, 35): 113.46, (12, 36): 24.77, (12, 37): 85.23, (12, 38): 47.08, (12, 39): 86.66, (12, 40): 87.29, (12, 41): 69.38, (12, 42): 68.81, (12, 43): 67.18, (12, 44): 29.45, (12, 45): 49.38, (12, 46): 64.5, (12, 47): 96.44, (12, 48): 50.85, (12, 0): 144.39,
    (13, 1): 58.29, (13, 2): 64.38, (13, 3): 122.45, (13, 4): 39.94, (13, 5): 70.6, (13, 6): 104.84, (13, 7): 55.46, (13, 8): 45.27, (13, 9): 58.3, (13, 10): 24.9, (13, 11): 71.86, (13, 12): 80.95, (13, 13): 0.0, (13, 14): 63.36, (13, 15): 78.96, (13, 16): 35.0, (13, 17): 72.01, (13, 18): 47.8, (13, 19): 54.18, (13, 20): 84.32, (13, 21): 87.2, (13, 22): 87.97, (13, 23): 59.79, (13, 24): 74.68, (13, 25): 75.38, (13, 26): 74.29, (13, 27): 58.46, (13, 28): 83.12, (13, 29): 61.39, (13, 30): 72.18, (13, 31): 89.66, (13, 32): 105.42, (13, 33): 71.59, (13, 34): 57.43, (13, 35): 109.21, (13, 36): 95.8, (13, 37): 52.52, (13, 38): 81.58, (13, 39): 52.88, (13, 40): 49.17, (13, 41): 66.49, (13, 42): 64.9, (13, 43): 62.53, (13, 44): 62.61, (13, 45): 70.59, (13, 46): 58.14, (13, 47): 89.07, (13, 48): 35.26, (13, 0): 115.42,
    (14, 1): 25.09, (14, 2): 55.88, (14, 3): 87.53, (14, 4): 14.19, (14, 5): 22.52, (14, 6): 53.18, (14, 7): 15.95, (14, 8): 8.68, (14, 9): 10.98, (14, 10): 57.49, (14, 11): 41.49, (14, 12): 31.09, (14, 13): 63.36, (14, 14): 0.0, (14, 15): 56.62, (14, 16): 26.71, (14, 17): 62.12, (14, 18): 19.0, (14, 19): 28.05, (14, 20): 77.22, (14, 21): 32.39, (14, 22): 100.94, (14, 23): 43.91, (14, 24): 21.63, (14, 25): 71.86, (14, 26): 26.02, (14, 27): 13.68, (14, 28): 20.13, (14, 29): 23.18, (14, 30): 9.28, (14, 31): 35.77, (14, 32): 33.68, (14, 33): 6.6, (14, 34): 7.49, (14, 35): 131.28, (14, 36): 52.06, (14, 37): 49.81, (14, 38): 5.92, (14, 39): 65.39, (14, 40): 62.23, (14, 41): 51.62, (14, 42): 49.94, (14, 43): 47.41, (14, 44): 9.19, (14, 45): 17.02, (14, 46): 61.59, (14, 47): 24.1, (14, 48): 28.91, (14, 0): 113.89,
    (15, 1): 61.51, (15, 2): 85.83, (15, 3): 150.9, (15, 4): 51.95, (15, 5): 75.41, (15, 6): 16.49, (15, 7): 68.21, (15, 8): 57.47, (15, 9): 65.21, (15, 10): 91.23, (15, 11): 15.67, (15, 12): 25.73, (15, 13): 78.96, (15, 14): 56.62, (15, 15): 0.0, (15, 16): 67.7, (15, 17): 62.67, (15, 18): 78.3, (15, 19): 82.09, (15, 20): 69.3, (15, 21): 45.36, (15, 22): 93.79, (15, 23): 12.21, (15, 24): 53.71, (15, 25): 9.3, (15, 26): 66.53, (15, 27): 43.71, (15, 28): 62.45, (15, 29): 64.21, (15, 30): 62.02, (15, 31): 17.54, (15, 32): 33.74, (15, 33): 60.12, (15, 34): 28.27, (15, 35): 38.29, (15, 36): 101.52, (15, 37): 37.71, (15, 38): 70.84, (15, 39): 27.36, (15, 40): 16.89, (15, 41): 33.34, (15, 42): 34.31, (15, 43): 26.64, (15, 44): 52.27, (15, 45): 35.9, (15, 46): 31.82, (15, 47): 69.62, (15, 48): 61.96, (15, 0): 95.26,
    (16, 1): 47.5, (16, 2): 59.97, (16, 3): 122.23, (16, 4): 36.11, (16, 5): 61.19, (16, 6): 89.85, (16, 7): 31.16, (16, 8): 44.2, (16, 9): 18.03, (16, 10): 52.65, (16, 11): 55.67, (16, 12): 92.21, (16, 13): 35.0, (16, 14): 26.71, (16, 15): 67.7, (16, 16): 0.0, (16, 17): 76.01, (16, 18): 30.94, (16, 19): 42.41, (16, 20): 109.71, (16, 21): 71.02, (16, 22): 121.7, (16, 23): 67.24, (16, 24): 42.07, (16, 25): 85.01, (16, 26): 22.0, (16, 27): 46.4, (16, 28): 15.11, (16, 29): 47.33, (16, 30): 21.42, (16, 31): 49.09, (16, 32): 44.52, (16, 33): 11.7, (16, 34): 51.08, (16, 35): 138.49, (16, 36): 76.53, (16, 37): 58.67, (16, 38): 12.95, (16, 39): 72.17, (16, 40): 65.84, (16, 41): 45.44, (16, 42): 44.85, (16, 43): 50.55, (16, 44): 37.61, (16, 45): 22.15, (16, 46): 92.87, (16, 47): 43.79, (16, 48): 77.95, (16, 0): 128.36,
    (17, 1): 10.17, (17, 2): 92.97, (17, 3): 51.47, (17, 4): 11.87, (17, 5): 41.73, (17, 6): 77.64, (17, 7): 75.48, (17, 8): 48.24, (17, 9): 74.13, (17, 10): 78.6, (17, 11): 54.12, (17, 12): 42.48, (17, 13): 72.01, (17, 14): 62.12, (17, 15): 62.67, (17, 16): 76.01, (17, 17): 0.0, (17, 18): 59.67, (17, 19): 52.35, (17, 20): 76.4, (17, 21): 30.49, (17, 22): 111.94, (17, 23): 60.51, (17, 24): 24.82, (17, 25): 69.79, (17, 26): 32.84, (17, 27): 13.51, (17, 28): 36.92, (17, 29): 22.03, (17, 30): 33.03, (17, 31): 19.21, (17, 32): 23.76, (17, 33): 22.58, (17, 34): 31.56, (17, 35): 148.39, (17, 36): 76.18, (17, 37): 64.98, (17, 38): 25.46, (17, 39): 53.47, (17, 40): 47.06, (17, 41): 31.68, (17, 42): 30.24, (17, 43): 25.44, (17, 44): 52.35, (17, 45): 15.89, (17, 46): 84.59, (17, 47): 47.17, (17, 48): 59.14, (17, 0): 128.99,
    (18, 1): 37.39, (18, 2): 64.71, (18, 3): 66.56, (18, 4): 8.2, (18, 5): 29.62, (18, 6): 60.16, (18, 7): 53.06, (18, 8): 31.52, (18, 9): 38.84, (18, 10): 31.22, (18, 11): 58.16, (18, 12): 68.92, (18, 13): 47.8, (18, 14): 19.0, (18, 15): 78.3, (18, 16): 30.94, (18, 17): 59.67, (18, 18): 0.0, (18, 19): 24.1, (18, 20): 59.41, (18, 21): 55.19, (18, 22): 70.94, (18, 23): 58.0, (18, 24): 8.58, (18, 25): 57.03, (18, 26): 25.94, (18, 27): 44.85, (18, 28): 32.74, (18, 29): 31.53, (18, 30): 25.4, (18, 31): 52.02, (18, 32): 40.88, (18, 33): 13.63, (18, 34): 25.85, (18, 35): 110.94, (18, 36): 53.42, (18, 37): 37.98, (18, 38): 14.8, (18, 39): 58.53, (18, 40): 53.4, (18, 41): 41.14, (18, 42): 40.45, (18, 43): 38.63, (18, 44): 16.52, (18, 45): 17.05, (18, 46): 67.14, (18, 47): 34.17, (18, 48): 45.92, (18, 0): 109.35,
    (19, 1): 51.02, (19, 2): 84.39, (19, 3): 96.64, (19, 4): 22.01, (19, 5): 51.43, (19, 6): 86.63, (19, 7): 37.51, (19, 8): 23.57, (19, 9): 53.09, (19, 10): 63.67, (19, 11): 76.56, (19, 12): 100.22, (19, 13): 54.18, (19, 14): 28.05, (19, 15): 82.09, (19, 16): 42.41, (19, 17): 52.35, (19, 18): 24.1, (19, 19): 0.0, (19, 20): 78.61, (19, 21): 71.91, (19, 22): 94.65, (19, 23): 53.54, (19, 24): 23.2, (19, 25): 78.23, (19, 26): 9.05, (19, 27): 38.39, (19, 28): 28.55, (19, 29): 39.57, (19, 30): 22.98, (19, 31): 41.99, (19, 32): 38.95, (19, 33): 17.5, (19, 34): 17.52, (19, 35): 127.61, (19, 36): 75.47, (19, 37): 40.97, (19, 38): 23.41, (19, 39): 52.88, (19, 40): 39.3, (19, 41): 33.02, (19, 42): 30.97, (19, 43): 28.73, (19, 44): 29.47, (19, 45): 42.85, (19, 46): 72.18, (19, 47): 52.83, (19, 48): 51.6, (19, 0): 124.79,
    (20, 1): 66.94, (20, 2): 40.15, (20, 3): 120.64, (20, 4): 57.67, (20, 5): 54.07, (20, 6): 63.62, (20, 7): 44.82, (20, 8): 56.24, (20, 9): 59.96, (20, 10): 98.19, (20, 11): 84.33, (20, 12): 75.56, (20, 13): 84.32, (20, 14): 77.22, (20, 15): 69.3, (20, 16): 109.71, (20, 17): 76.4, (20, 18): 59.41, (20, 19): 78.61, (20, 20): 0.0, (20, 21): 56.0, (20, 22): 46.53, (20, 23): 61.77, (20, 24): 69.11, (20, 25): 45.39, (20, 26): 85.58, (20, 27): 72.71, (20, 28): 96.89, (20, 29): 103.49, (20, 30): 88.54, (20, 31): 77.23, (20, 32): 87.63, (20, 33): 84.11, (20, 34): 90.85, (20, 35): 71.21, (20, 36): 55.56, (20, 37): 97.03, (20, 38): 77.1, (20, 39): 104.92, (20, 40): 102.19, (20, 41): 84.6, (20, 42): 84.03, (20, 43): 82.4, (20, 44): 47.73, (20, 45): 67.67, (20, 46): 82.79, (20, 47): 114.73, (20, 48): 68.14, (20, 0): 157.39,
    (21, 1): 82.12, (21, 2): 54.25, (21, 3): 104.06, (21, 4): 79.58, (21, 5): 81.52, (21, 6): 48.89, (21, 7): 18.51, (21, 8): 53.25, (21, 9): 22.3, (21, 10): 74.15, (21, 11): 60.3, (21, 12): 109.05, (21, 13): 87.2, (21, 14): 32.39, (21, 15): 45.36, (21, 16): 71.02, (21, 17): 30.49, (21, 18): 55.19, (21, 19): 71.91, (21, 20): 56.0, (21, 21): 0.0, (21, 22): 86.11, (21, 23): 34.43, (21, 24): 41.19, (21, 25): 35.27, (21, 26): 74.52, (21, 27): 56.5, (21, 28): 80.79, (21, 29): 74.72, (21, 30): 58.21, (21, 31): 32.58, (21, 32): 40.79, (21, 33): 58.95, (21, 34): 26.1, (21, 35): 64.62, (21, 36): 91.74, (21, 37): 18.05, (21, 38): 66.19, (21, 39): 6.77, (21, 40): 19.98, (21, 41): 15.5, (21, 42): 12.94, (21, 43): 16.36, (21, 44): 70.67, (21, 45): 24.02, (21, 46): 41.02, (21, 47): 61.51, (21, 48): 54.29, (21, 0): 80.72,
    (22, 1): 64.27, (22, 2): 111.06, (22, 3): 35.77, (22, 4): 51.39, (22, 5): 77.87, (22, 6): 109.53, (22, 7): 94.99, (22, 8): 67.67, (22, 9): 99.08, (22, 10): 92.89, (22, 11): 87.57, (22, 12): 49.9, (22, 13): 87.97, (22, 14): 100.94, (22, 15): 93.79, (22, 16): 121.7, (22, 17): 111.94, (22, 18): 70.94, (22, 19): 94.65, (22, 20): 46.53, (22, 21): 86.11, (22, 22): 0.0, (22, 23): 85.16, (22, 24): 56.68, (22, 25): 80.85, (22, 26): 89.3, (22, 27): 60.3, (22, 28): 64.97, (22, 29): 50.94, (22, 30): 70.3, (22, 31): 65.98, (22, 32): 88.45, (22, 33): 58.11, (22, 34): 61.06, (22, 35): 144.88, (22, 36): 33.6, (22, 37): 100.34, (22, 38): 56.88, (22, 39): 96.15, (22, 40): 95.36, (22, 41): 77.29, (22, 42): 76.71, (22, 43): 75.08, (22, 44): 37.28, (22, 45): 59.4, (22, 46): 72.73, (22, 47): 100.22, (22, 48): 61.63, (22, 0): 165.69,
    (23, 1): 49.13, (23, 2): 57.52, (23, 3): 142.4, (23, 4): 44.14, (23, 5): 73.59, (23, 6): 107.85, (23, 7): 58.65, (23, 8): 48.47, (23, 9): 63.32, (23, 10): 23.14, (23, 11): 67.63, (23, 12): 49.39, (23, 13): 59.79, (23, 14): 43.91, (23, 15): 12.21, (23, 16): 67.24, (23, 17): 60.51, (23, 18): 58.0, (23, 19): 53.54, (23, 20): 61.77, (23, 21): 34.43, (23, 22): 85.16, (23, 23): 0.0, (23, 24): 53.97, (23, 25): 17.14, (23, 26): 71.1, (23, 27): 47.3, (23, 28): 63.82, (23, 29): 66.01, (23, 30): 65.24, (23, 31): 22.86, (23, 32): 40.06, (23, 33): 57.51, (23, 34): 20.53, (23, 35): 40.95, (23, 36): 116.71, (23, 37): 54.55, (23, 38): 80.85, (23, 39): 42.8, (23, 40): 15.17, (23, 41): 25.22, (23, 42): 26.03, (23, 43): 21.73, (23, 44): 51.65, (23, 45): 29.09, (23, 46): 19.89, (23, 47): 59.16, (23, 48): 50.53, (23, 0): 102.6,
    (24, 1): 35.61, (24, 2): 82.09, (24, 3): 53.47, (24, 4): 21.18, (24, 5): 51.02, (24, 6): 86.27, (24, 7): 66.49, (24, 8): 38.68, (24, 9): 71.48, (24, 10): 67.58, (24, 11): 46.0, (24, 12): 51.92, (24, 13): 61.71, (24, 14): 55.05, (24, 15): 53.71, (24, 16): 42.07, (24, 17): 24.82, (24, 18): 8.58, (24, 19): 23.2, (24, 20): 69.11, (24, 21): 41.19, (24, 22): 56.68, (24, 23): 53.97, (24, 24): 0.0, (24, 25): 57.85, (24, 26): 32.88, (24, 27): 9.53, (24, 28): 25.79, (24, 29): 11.76, (24, 30): 33.34, (24, 31): 15.69, (24, 32): 23.9, (24, 33): 17.72, (24, 34): 25.21, (24, 35): 127.74, (24, 36): 66.1, (24, 37): 52.35, (24, 38): 13.99, (24, 39): 42.59, (24, 40): 33.91, (24, 41): 22.99, (24, 42): 21.61, (24, 43): 18.07, (24, 44): 33.87, (24, 45): 12.46, (24, 46): 67.42, (24, 47): 34.61, (24, 48): 45.19, (24, 0): 113.78,
    (25, 1): 38.09, (25, 2): 91.11, (25, 3): 61.41, (25, 4): 11.87, (25, 5): 41.56, (25, 6): 77.67, (25, 7): 75.26, (25, 8): 47.88, (25, 9): 73.98, (25, 10): 77.45, (25, 11): 53.25, (25, 12): 40.48, (25, 13): 72.24, (25, 14): 62.95, (25, 15): 9.3, (25, 16): 85.01, (25, 17): 69.79, (25, 18): 57.03, (25, 19): 78.23, (25, 20): 45.39, (25, 21): 35.27, (25, 22): 80.85, (25, 23): 17.14, (25, 24): 57.85, (25, 25): 0.0, (25, 26): 68.6, (25, 27): 40.56, (25, 28): 33.94, (25, 29): 37.22, (25, 30): 37.58, (25, 31): 13.5, (25, 32): 32.71, (25, 33): 46.95, (25, 34): 12.17, (25, 35): 132.47, (25, 36): 87.25, (25, 37): 58.02, (25, 38): 22.06, (25, 39): 64.92, (25, 40): 53.86, (25, 41): 37.6, (25, 42): 38.77, (25, 43): 37.26, (25, 44): 47.36, (25, 45): 19.05, (25, 46): 78.36, (25, 47): 42.43, (25, 48): 61.05, (25, 0): 116.72,
    (26, 1): 46.3, (26, 2): 88.47, (26, 3): 67.47, (26, 4): 20.16, (26, 5): 50.06, (26, 6): 85.4, (26, 7): 65.5, (26, 8): 38.2, (26, 9): 66.09, (26, 10): 67.12, (26, 11): 46.35, (26, 12): 39.47, (26, 13): 60.3, (26, 14): 52.67, (26, 15): 66.53, (26, 16): 22.0, (26, 17): 32.84, (26, 18): 25.94, (26, 19): 9.05, (26, 20): 85.58, (26, 21): 74.52, (26, 22): 89.3, (26, 23): 71.1, (26, 24): 32.88, (26, 25): 68.6, (26, 26): 0.0, (26, 27): 34.84, (26, 28): 13.4, (26, 29): 23.03, (26, 30): 25.46, (26, 31): 44.03, (26, 32): 19.54, (26, 33): 37.56, (26, 34): 56.3, (26, 35): 110.36, (26, 36): 77.01, (26, 37): 62.19, (26, 38): 33.7, (26, 39): 59.35, (26, 40): 44.53, (26, 41): 25.46, (26, 42): 25.66, (26, 43): 22.91, (26, 44): 24.94, (26, 45): 29.64, (26, 46): 66.77, (26, 47): 45.91, (26, 48): 50.5, (26, 0): 100.48,
    (27, 1): 40.81, (27, 2): 93.96, (27, 3): 66.94, (27, 4): 10.38, (27, 5): 46.22, (27, 6): 82.66, (27, 7): 72.84, (27, 8): 43.32, (27, 9): 69.66, (27, 10): 72.26, (27, 11): 51.33, (27, 12): 37.51, (27, 13): 68.13, (27, 14): 58.68, (27, 15): 59.09, (27, 16): 26.44, (27, 17): 33.51, (27, 18): 44.85, (27, 19): 38.39, (27, 20): 72.71, (27, 21): 56.5, (27, 22): 60.3, (27, 23): 47.3, (27, 24): 9.53, (27, 25): 40.56, (27, 26): 34.84, (27, 27): 0.0, (27, 28): 27.32, (27, 29): 16.92, (27, 30): 29.7, (27, 31): 31.48, (27, 32): 26.66, (27, 33): 33.26, (27, 34): 40.1, (27, 35): 112.63, (27, 36): 63.55, (27, 37): 54.73, (27, 38): 25.6, (27, 39): 54.5, (27, 40): 45.21, (27, 41): 31.4, (27, 42): 29.91, (27, 43): 28.17, (27, 44): 32.08, (27, 45): 21.41, (27, 46): 61.17, (27, 47): 40.17, (27, 48): 45.39, (27, 0): 103.55,
    (28, 1): 20.07, (28, 2): 66.47, (28, 3): 71.57, (28, 4): 15.62, (28, 5): 32.43, (28, 6): 66.53, (28, 7): 53.0, (28, 8): 25.1, (28, 9): 37.92, (28, 10): 43.01, (28, 11): 56.42, (28, 12): 61.54, (28, 13): 38.12, (28, 14): 15.3, (28, 15): 73.6, (28, 16): 22.8, (28, 17): 42.53, (28, 18): 32.74, (28, 19): 28.55, (28, 20): 96.89, (28, 21): 80.79, (28, 22): 64.97, (28, 23): 63.82, (28, 24): 25.79, (28, 25): 33.94, (28, 26): 13.4, (28, 27): 27.32, (28, 28): 0.0, (28, 29): 18.84, (28, 30): 6.74, (28, 31): 51.26, (28, 32): 26.94, (28, 33): 14.74, (28, 34): 17.73, (28, 35): 99.65, (28, 36): 50.91, (28, 37): 30.56, (28, 38): 12.99, (28, 39): 46.22, (28, 40): 43.52, (28, 41): 33.97, (28, 42): 34.46, (28, 43): 32.25, (28, 44): 16.44, (28, 45): 13.48, (28, 46): 58.09, (28, 47): 30.53, (28, 48): 40.7, (28, 0): 90.79,
    (29, 1): 37.39, (29, 2): 69.97, (29, 3): 77.02, (29, 4): 19.66, (29, 5): 41.66, (29, 6): 68.47, (29, 7): 53.74, (29, 8): 30.42, (29, 9): 42.09, (29, 10): 43.4, (29, 11): 63.9, (29, 12): 69.21, (29, 13): 44.03, (29, 14): 16.88, (29, 15): 78.01, (29, 16): 29.71, (29, 17): 51.36, (29, 18): 37.45, (29, 19): 34.71, (29, 20): 93.08, (29, 21): 74.72, (29, 22): 50.94, (29, 23): 66.01, (29, 24): 11.76, (29, 25): 37.22, (29, 26): 23.03, (29, 27): 16.92, (29, 28): 18.84, (29, 29): 0.0, (29, 30): 20.54, (29, 31): 36.86, (29, 32): 28.17, (29, 33): 22.64, (29, 34): 34.48, (29, 35): 90.63, (29, 36): 47.55, (29, 37): 40.29, (29, 38): 14.03, (29, 39): 30.75, (29, 40): 33.53, (29, 41): 33.24, (29, 42): 32.84, (29, 43): 30.21, (29, 44): 14.9, (29, 45): 14.19, (29, 46): 53.97, (29, 47): 25.68, (29, 48): 37.01, (29, 0): 79.68,
    (30, 1): 63.6, (30, 2): 51.47, (30, 3): 112.58, (30, 4): 72.86, (30, 5): 76.0, (30, 6): 45.03, (30, 7): 16.06, (30, 8): 50.03, (30, 9): 19.57, (30, 10): 71.31, (30, 11): 58.04, (30, 12): 106.38, (30, 13): 84.61, (30, 14): 30.34, (30, 15): 43.35, (30, 16): 67.71, (30, 17): 28.71, (30, 18): 52.41, (30, 19): 70.09, (30, 20): 55.03, (30, 21): 58.21, (30, 22): 70.3, (30, 23): 65.24, (30, 24): 33.34, (30, 25): 37.58, (30, 26): 25.46, (30, 27): 29.7, (30, 28): 6.74, (30, 29): 20.54, (30, 30): 0.0, (30, 31): 27.82, (30, 32): 35.01, (30, 33): 52.13, (30, 34): 22.57, (30, 35): 72.16, (30, 36): 97.87, (30, 37): 24.05, (30, 38): 73.89, (30, 39): 11.05, (30, 40): 25.17, (30, 41): 13.21, (30, 42): 10.81, (30, 43): 13.21, (30, 44): 64.4, (30, 45): 20.66, (30, 46): 35.66, (30, 47): 60.62, (30, 48): 52.94, (30, 0): 75.21,
    (31, 1): 43.71, (31, 2): 87.98, (31, 3): 61.34, (31, 4): 21.22, (31, 5): 54.67, (31, 6): 88.91, (31, 7): 70.02, (31, 8): 42.46, (31, 9): 73.52, (31, 10): 73.95, (31, 11): 49.61, (31, 12): 47.57, (31, 13): 69.89, (31, 14): 60.98, (31, 15): 56.45, (31, 16): 40.11, (31, 17): 29.76, (31, 18): 29.57, (31, 19): 16.0, (31, 20): 82.91, (31, 21): 32.58, (31, 22): 65.98, (31, 23): 22.86, (31, 24): 15.69, (31, 25): 13.5, (31, 26): 44.03, (31, 27): 31.48, (31, 28): 51.26, (31, 29): 36.86, (31, 30): 27.82, (31, 31): 0.0, (31, 32): 22.23, (31, 33): 36.94, (31, 34): 43.62, (31, 35): 100.7, (31, 36): 73.94, (31, 37): 61.07, (31, 38): 30.97, (31, 39): 50.69, (31, 40): 40.4, (31, 41): 29.14, (31, 42): 28.83, (31, 43): 26.19, (31, 44): 22.49, (31, 45): 15.42, (31, 46): 56.47, (31, 47): 33.57, (31, 48): 43.43, (31, 0): 88.5,
    (32, 1): 63.66, (32, 2): 94.08, (32, 3): 61.12, (32, 4): 9.86, (32, 5): 56.5, (32, 6): 92.75, (32, 7): 72.05, (32, 8): 45.47, (32, 9): 79.89, (32, 10): 77.06, (32, 11): 55.27, (32, 12): 47.47, (32, 13): 68.05, (32, 14): 60.64, (32, 15): 49.77, (32, 16): 37.65, (32, 17): 25.05, (32, 18): 29.83, (32, 19): 28.47, (32, 20): 88.09, (32, 21): 48.46, (32, 22): 67.8, (32, 23): 31.53, (32, 24): 23.9, (32, 25): 32.71, (32, 26): 19.54, (32, 27): 26.66, (32, 28): 26.94, (32, 29): 28.17, (32, 30): 35.01, (32, 31): 22.23, (32, 32): 0.0, (32, 33): 24.0, (32, 34): 42.73, (32, 35): 103.5, (32, 36): 71.22, (32, 37): 57.57, (32, 38): 30.57, (32, 39): 51.63, (32, 40): 38.96, (32, 41): 28.3, (32, 42): 28.08, (32, 43): 26.07, (32, 44): 19.71, (32, 45): 21.61, (32, 46): 56.53, (32, 47): 32.45, (32, 48): 41.8, (32, 0): 85.07,
    (33, 1): 60.45, (33, 2): 106.22, (33, 3): 61.18, (33, 4): 35.14, (33, 5): 59.82, (33, 6): 95.32, (33, 7): 71.07, (33, 8): 38.76, (33, 9): 81.6, (33, 10): 84.69, (33, 11): 61.0, (33, 12): 37.67, (33, 13): 78.51, (33, 14): 68.5, (33, 15): 48.77, (33, 16): 60.09, (33, 17): 54.18, (33, 18): 50.53, (33, 19): 42.67, (33, 20): 105.25, (33, 21): 67.02, (33, 22): 65.54, (33, 23): 51.2, (33, 24): 17.72, (33, 25): 46.95, (33, 26): 37.56, (33, 27): 33.26, (33, 28): 14.74, (33, 29): 22.64, (33, 30): 52.13, (33, 31): 36.94, (33, 32): 24.0, (33, 33): 0.0, (33, 34): 56.19, (33, 35): 121.03, (33, 36): 84.64, (33, 37): 70.59, (33, 38): 41.2, (33, 39): 66.42, (33, 40): 56.19, (33, 41): 39.9, (33, 42): 39.84, (33, 43): 38.1, (33, 44): 39.17, (33, 45): 36.68, (33, 46): 74.29, (33, 47): 48.08, (33, 48): 51.39, (33, 0): 108.19,
    (34, 1): 23.85, (34, 2): 88.44, (34, 3): 63.18, (34, 4): 11.69, (34, 5): 38.69, (34, 6): 77.41, (34, 7): 61.95, (34, 8): 35.66, (34, 9): 63.13, (34, 10): 65.56, (34, 11): 46.71, (34, 12): 44.8, (34, 13): 64.65, (34, 14): 57.42, (34, 15): 43.03, (34, 16): 32.12, (34, 17): 22.85, (34, 18): 17.35, (34, 19): 12.63, (34, 20): 73.95, (34, 21): 56.88, (34, 22): 68.0, (34, 23): 35.01, (34, 24): 25.21, (34, 25): 12.17, (34, 26): 56.3, (34, 27): 40.1, (34, 28): 17.73, (34, 29): 34.48, (34, 30): 22.57, (34, 31): 43.62, (34, 32): 42.73, (34, 33): 56.19, (34, 34): 0.0, (34, 35): 124.36, (34, 36): 77.71, (34, 37): 65.45, (34, 38): 31.9, (34, 39): 58.01, (34, 40): 45.78, (34, 41): 35.94, (34, 42): 35.63, (34, 43): 32.91, (34, 44): 26.84, (34, 45): 18.94, (34, 46): 68.06, (34, 47): 40.71, (34, 48): 51.18, (34, 0): 105.46,
    (35, 1): 124.18, (35, 2): 61.87, (35, 3): 154.33, (35, 4): 111.38, (35, 5): 116.35, (35, 6): 32.59, (35, 7): 60.36, (35, 8): 108.83, (35, 9): 81.76, (35, 10): 103.39, (35, 11): 100.12, (35, 12): 143.16, (35, 13): 133.95, (35, 14): 84.53, (35, 15): 35.51, (35, 16): 111.4, (35, 17): 93.87, (35, 18): 119.26, (35, 19): 128.74, (35, 20): 85.24, (35, 21): 93.86, (35, 22): 112.19, (35, 23): 82.35, (35, 24): 74.51, (35, 25): 71.08, (35, 26): 110.36, (35, 27): 112.63, (35, 28): 99.65, (35, 29): 90.63, (35, 30): 72.16, (35, 31): 100.7, (35, 32): 103.5, (35, 33): 121.03, (35, 34): 124.36, (35, 35): 0.0, (35, 36): 97.41, (35, 37): 50.9, (35, 38): 117.42, (35, 39): 61.47, (35, 40): 80.01, (35, 41): 69.17, (35, 42): 67.13, (35, 43): 63.79, (35, 44): 95.64, (35, 45): 49.74, (35, 46): 40.19, (35, 47): 101.41, (35, 48): 92.36, (35, 0): 86.23,
    (36, 1): 62.36, (36, 2): 44.64, (36, 3): 143.36, (36, 4): 98.44, (36, 5): 99.62, (36, 6): 45.08, (36, 7): 28.01, (36, 8): 86.55, (36, 9): 11.91, (36, 10): 86.35, (36, 11): 64.52, (36, 12): 132.84, (36, 13): 97.16, (36, 14): 64.14, (36, 15): 59.68, (36, 16): 58.07, (36, 17): 47.89, (36, 18): 81.11, (36, 19): 85.41, (36, 20): 25.08, (36, 21): 62.72, (36, 22): 86.25, (36, 23): 71.71, (36, 24): 50.71, (36, 25): 41.6, (36, 26): 77.01, (36, 27): 63.55, (36, 28): 50.91, (36, 29): 47.55, (36, 30): 97.87, (36, 31): 73.94, (36, 32): 71.22, (36, 33): 84.64, (36, 34): 77.71, (36, 35): 97.41, (36, 36): 0.0, (36, 37): 61.41, (36, 38): 94.01, (36, 39): 31.29, (36, 40): 28.46, (36, 41): 21.29, (36, 42): 19.0, (36, 43): 21.0, (36, 44): 67.01, (36, 45): 39.36, (36, 46): 32.59, (36, 47): 56.87, (36, 48): 68.47, (36, 0): 47.8,
    (37, 1): 11.27, (37, 2): 57.62, (37, 3): 105.97, (37, 4): 61.99, (37, 5): 65.16, (37, 6): 60.59, (37, 7): 33.05, (37, 8): 65.53, (37, 9): 33.27, (37, 10): 52.0, (37, 11): 33.61, (37, 12): 72.67, (37, 13): 61.5, (37, 14): 21.01, (37, 15): 50.76, (37, 16): 62.02, (37, 17): 36.39, (37, 18): 53.69, (37, 19): 60.62, (37, 20): 39.62, (37, 21): 23.44, (37, 22): 57.08, (37, 23): 48.79, (37, 24): 43.57, (37, 25): 37.04, (37, 26): 62.19, (37, 27): 54.73, (37, 28): 30.56, (37, 29): 40.29, (37, 30): 24.05, (37, 31): 61.07, (37, 32): 57.57, (37, 33): 70.59, (37, 34): 65.45, (37, 35): 50.9, (37, 36): 61.41, (37, 37): 0.0, (37, 38): 72.9, (37, 39): 33.73, (37, 40): 17.01, (37, 41): 17.77, (37, 42): 15.27, (37, 43): 12.53, (37, 44): 62.09, (37, 45): 30.07, (37, 46): 27.04, (37, 47): 44.51, (37, 48): 51.86, (37, 0): 60.13,
    (38, 1): 52.29, (38, 2): 57.06, (38, 3): 134.9, (38, 4): 88.49, (38, 5): 90.89, (38, 6): 37.68, (38, 7): 41.33, (38, 8): 82.6, (38, 9): 25.38, (38, 10): 84.44, (38, 11): 68.94, (38, 12): 123.7, (38, 13): 86.73, (38, 14): 33.15, (38, 15): 53.59, (38, 16): 61.5, (38, 17): 28.74, (38, 18): 67.56, (38, 19): 69.12, (38, 20): 63.29, (38, 21): 53.36, (38, 22): 72.52, (38, 23): 62.18, (38, 24): 41.8, (38, 25): 47.63, (38, 26): 31.25, (38, 27): 28.44, (38, 28): 6.08, (38, 29): 14.03, (38, 30): 73.89, (38, 31): 30.97, (38, 32): 30.57, (38, 33): 41.2, (38, 34): 31.9, (38, 35): 117.42, (38, 36): 94.01, (38, 37): 72.9, (38, 38): 0.0, (38, 39): 42.24, (38, 40): 44.63, (38, 41): 40.84, (38, 42): 38.87, (38, 43): 36.23, (38, 44): 31.79, (38, 45): 25.57, (38, 46): 68.61, (38, 47): 47.68, (38, 48): 56.09, (38, 0): 103.55,
    (39, 1): 53.74, (39, 2): 64.77, (39, 3): 116.42, (39, 4): 70.03, (39, 5): 72.17, (39, 6): 47.49, (39, 7): 20.38, (39, 8): 70.76, (39, 9): 23.74, (39, 10): 76.74, (39, 11): 56.88, (39, 12): 104.73, (39, 13): 76.79, (39, 14): 20.86, (39, 15): 35.27, (39, 16): 54.06, (39, 17): 26.18, (39, 18): 61.52, (39, 19): 59.41, (39, 20): 58.01, (39, 21): 51.12, (39, 22): 70.58, (39, 23): 63.48, (39, 24): 39.38, (39, 25): 31.19, (39, 26): 29.61, (39, 27): 12.77, (39, 28): 28.13, (39, 29): 30.75, (39, 30): 11.05, (39, 31): 50.69, (39, 32): 51.63, (39, 33): 66.42, (39, 34): 58.01, (39, 35): 61.47, (39, 36): 31.29, (39, 37): 33.73, (39, 38): 42.24, (39, 39): 0.0, (39, 40): 25.36, (39, 41): 16.6, (39, 42): 14.3, (39, 43): 16.39, (39, 44): 53.55, (39, 45): 12.39, (39, 46): 41.48, (39, 47): 29.55, (39, 48): 43.49, (39, 0): 87.11,
    (40, 1): 42.22, (40, 2): 81.08, (40, 3): 57.04, (40, 4): 9.11, (40, 5): 50.64, (40, 6): 80.72, (40, 7): 59.54, (40, 8): 34.06, (40, 9): 66.62, (40, 10): 66.67, (40, 11): 45.71, (40, 12): 38.54, (40, 13): 63.88, (40, 14): 53.86, (40, 15): 47.63, (40, 16): 33.08, (40, 17): 19.49, (40, 18): 25.23, (40, 19): 21.46, (40, 20): 75.89, (40, 21): 44.84, (40, 22): 63.82, (40, 23): 27.57, (40, 24): 20.85, (40, 25): 28.5, (40, 26): 16.53, (40, 27): 24.55, (40, 28): 17.91, (40, 29): 33.53, (40, 30): 25.17, (40, 31): 40.4, (40, 32): 38.96, (40, 33): 56.19, (40, 34): 45.78, (40, 35): 80.01, (40, 36): 28.46, (40, 37): 17.01, (40, 38): 44.63, (40, 39): 25.36, (40, 40): 0.0, (40, 41): 21.04, (40, 42): 21.17, (40, 43): 21.95, (40, 44): 15.53, (40, 45): 12.36, (40, 46): 53.3, (40, 47): 30.43, (40, 48): 39.18, (40, 0): 72.22,
    (41, 1): 44.63, (41, 2): 58.36, (41, 3): 91.56, (41, 4): 45.88, (41, 5): 45.2, (41, 6): 40.17, (41, 7): 22.25, (41, 8): 51.97, (41, 9): 18.44, (41, 10): 61.61, (41, 11): 42.98, (41, 12): 77.88, (41, 13): 57.89, (41, 14): 13.17, (41, 15): 31.2, (41, 16): 40.17, (41, 17): 21.95, (41, 18): 44.01, (41, 19): 48.53, (41, 20): 55.49, (41, 21): 45.04, (41, 22): 63.73, (41, 23): 52.67, (41, 24): 29.57, (41, 25): 26.9, (41, 26): 26.57, (41, 27): 11.58, (41, 28): 23.34, (41, 29): 20.21, (41, 30): 13.95, (41, 31): 40.92, (41, 32): 28.3, (41, 33): 39.9, (41, 34): 35.94, (41, 35): 69.17, (41, 36): 21.29, (41, 37): 17.77, (41, 38): 40.84, (41, 39): 16.6, (41, 40): 21.04, (41, 41): 0.0, (41, 42): 3.61, (41, 43): 7.17, (41, 44): 38.09, (41, 45): 5.53, (41, 46): 27.2, (41, 47): 33.07, (41, 48): 35.99, (41, 0): 72.21,
    (42, 1): 45.99, (42, 2): 62.53, (42, 3): 93.92, (42, 4): 49.95, (42, 5): 47.27, (42, 6): 38.69, (42, 7): 21.98, (42, 8): 54.77, (42, 9): 16.06, (42, 10): 64.77, (42, 11): 46.11, (42, 12): 80.51, (42, 13): 59.84, (42, 14): 11.36, (42, 15): 30.69, (42, 16): 41.55, (42, 17): 21.98, (42, 18): 45.58, (42, 19): 51.3, (42, 20): 58.95, (42, 21): 48.51, (42, 22): 67.19, (42, 23): 56.13, (42, 24): 32.61, (42, 25): 29.95, (42, 26): 25.21, (42, 27): 10.54, (42, 28): 21.15, (42, 29): 16.97, (42, 30): 12.61, (42, 31): 38.0, (42, 32): 28.08, (42, 33): 39.84, (42, 34): 35.63, (42, 35): 67.13, (42, 36): 19.0, (42, 37): 15.27, (42, 38): 38.87, (42, 39): 14.3, (42, 40): 21.17, (42, 41): 3.61, (42, 42): 0.0, (42, 43): 5.83, (42, 44): 35.44, (42, 45): 2.83, (42, 46): 30.68, (42, 47): 29.86, (42, 48): 33.85, (42, 0): 68.66,
    (43, 1): 51.36, (43, 2): 66.53, (43, 3): 97.73, (43, 4): 54.84, (43, 5): 51.2, (43, 6): 43.4, (43, 7): 26.56, (43, 8): 61.97, (43, 9): 19.84, (43, 10): 70.58, (43, 11): 51.84, (43, 12): 86.11, (43, 13): 65.11, (43, 14): 12.74, (43, 15): 37.41, (43, 16): 48.1, (43, 17): 23.14, (43, 18): 50.71, (43, 19): 56.44, (43, 20): 65.08, (43, 21): 53.65, (43, 22): 73.18, (43, 23): 62.12, (43, 24): 37.91, (43, 25): 35.27, (43, 26): 30.52, (43, 27): 12.64, (43, 28): 27.68, (43, 29): 20.94, (43, 30): 14.41, (43, 31): 43.4, (43, 32): 30.68, (43, 33): 44.08, (43, 34): 37.99, (43, 35): 63.79, (43, 36): 21.95, (43, 37): 12.53, (43, 38): 36.23, (43, 39): 16.39, (43, 40): 21.95, (43, 41): 7.17, (43, 42): 5.83, (43, 43): 0.0, (43, 44): 39.41, (43, 45): 3.54, (43, 46): 34.5, (43, 47): 32.02, (43, 48): 30.07, (43, 0): 71.42,
    (44, 1): 55.98, (44, 2): 67.88, (44, 3): 97.82, (44, 4): 57.73, (44, 5): 50.76, (44, 6): 30.58, (44, 7): 22.41, (44, 8): 66.99, (44, 9): 30.51, (44, 10): 70.89, (44, 11): 51.03, (44, 12): 90.84, (44, 13): 69.69, (44, 14): 22.63, (44, 15): 47.69, (44, 16): 58.27, (44, 17): 31.17, (44, 18): 56.02, (44, 19): 61.74, (44, 20): 63.22, (44, 21): 55.12, (44, 22): 73.7, (44, 23): 63.47, (44, 24): 42.77, (44, 25): 39.11, (44, 26): 28.42, (44, 27): 15.48, (44, 28): 32.9, (44, 29): 25.12, (44, 30): 18.89, (44, 31): 47.86, (44, 32): 38.86, (44, 33): 51.0, (44, 34): 42.49, (44, 35): 95.64, (44, 36): 67.01, (44, 37): 62.09, (44, 38): 31.79, (44, 39): 53.55, (44, 40): 15.53, (44, 41): 38.09, (44, 42): 35.44, (44, 43): 39.41, (44, 44): 0.0, (44, 45): 33.07, (44, 46): 8.25, (44, 47): 26.18, (44, 48): 15.97, (44, 0): 53.6,
    (45, 1): 50.79, (45, 2): 65.46, (45, 3): 96.61, (45, 4): 52.44, (45, 5): 48.04, (45, 6): 42.1, (45, 7): 26.09, (45, 8): 60.52, (45, 9): 18.94, (45, 10): 70.33, (45, 11): 50.28, (45, 12): 86.47, (45, 13): 65.49, (45, 14): 15.55, (45, 15): 37.16, (45, 16): 47.11, (45, 17): 21.04, (45, 18): 47.82, (45, 19): 54.54, (45, 20): 63.11, (45, 21): 52.63, (45, 22): 71.17, (45, 23): 60.12, (45, 24): 36.59, (45, 25): 32.96, (45, 26): 28.95, (45, 27): 10.69, (45, 28): 25.72, (45, 29): 19.0, (45, 30): 13.69, (45, 31): 42.53, (45, 32): 30.84, (45, 33): 43.25, (45, 34): 37.41, (45, 35): 49.74, (45, 36): 39.36, (45, 37): 30.07, (45, 38): 25.57, (45, 39): 12.39, (45, 40): 12.36, (45, 41): 5.53, (45, 42): 2.83, (45, 43): 3.54, (45, 44): 33.07, (45, 45): 0.0, (45, 46): 33.11, (45, 47): 29.49, (45, 48): 32.49, (45, 0): 68.29,
    (46, 1): 57.97, (46, 2): 68.24, (46, 3): 100.6, (46, 4): 58.48, (46, 5): 50.72, (46, 6): 27.21, (46, 7): 26.35, (46, 8): 67.15, (46, 9): 31.24, (46, 10): 71.22, (46, 11): 51.36, (46, 12): 88.94, (46, 13): 67.59, (46, 14): 18.73, (46, 15): 41.46, (46, 16): 51.18, (46, 17): 25.09, (46, 18): 50.75, (46, 19): 57.47, (46, 20): 66.04, (46, 21): 54.57, (46, 22): 73.09, (46, 23): 62.03, (46, 24): 37.82, (46, 25): 34.17, (46, 26): 30.14, (46, 27): 13.72, (46, 28): 29.74, (46, 29): 23.03, (46, 30): 17.73, (46, 31): 44.64, (46, 32): 33.0, (46, 33): 45.16, (46, 34): 38.97, (46, 35): 91.25, (46, 36): 63.32, (46, 37): 27.04, (46, 38): 68.61, (46, 39): 41.48, (46, 40): 53.3, (46, 41): 27.2, (46, 42): 30.68, (46, 43): 34.5, (46, 44): 8.25, (46, 45): 33.11, (46, 46): 0.0, (46, 47): 25.27, (46, 48): 11.21, (46, 0): 50.81,
    (47, 1): 92.15, (47, 2): 40.01, (47, 3): 45.39, (47, 4): 44.99, (47, 5): 64.64, (47, 6): 90.86, (47, 7): 49.62, (47, 8): 82.59, (47, 9): 68.17, (47, 10): 74.34, (47, 11): 89.52, (47, 12): 53.61, (47, 13): 19.61, (47, 14): 33.12, (47, 15): 82.5, (47, 16): 97.86, (47, 17): 59.15, (47, 18): 22.77, (47, 19): 13.33, (47, 20): 42.04, (47, 21): 88.13, (47, 22): 91.62, (47, 23): 90.89, (47, 24): 69.62, (47, 25): 63.79, (47, 26): 70.44, (47, 27): 47.56, (47, 28): 66.33, (47, 29): 76.64, (47, 30): 47.73, (47, 31): 60.86, (47, 32): 76.54, (47, 33): 89.43, (47, 34): 72.85, (47, 35): 14.5, (47, 36): 23.77, (47, 37): 44.51, (47, 38): 47.68, (47, 39): 29.55, (47, 40): 30.43, (47, 41): 33.07, (47, 42): 29.86, (47, 43): 32.02, (47, 44): 26.18, (47, 45): 29.49, (47, 46): 25.27, (47, 47): 0.0, (47, 48): 16.12, (47, 0): 53.84,
    (48, 1): 77.86, (48, 2): 64.73, (48, 3): 73.88, (48, 4): 48.62, (48, 5): 53.82, (48, 6): 68.09, (48, 7): 59.3, (48, 8): 66.54, (48, 9): 49.9, (48, 10): 67.69, (48, 11): 83.18, (48, 12): 67.42, (48, 13): 53.12, (48, 14): 42.07, (48, 15): 74.89, (48, 16): 86.3, (48, 17): 47.65, (48, 18): 16.02, (48, 19): 13.96, (48, 20): 34.32, (48, 21): 75.0, (48, 22): 88.96, (48, 23): 88.23, (48, 24): 67.0, (48, 25): 61.14, (48, 26): 67.46, (48, 27): 45.57, (48, 28): 63.55, (48, 29): 72.48, (48, 30): 44.24, (48, 31): 57.34, (48, 32): 73.55, (48, 33): 86.44, (48, 34): 69.86, (48, 35): 30.52, (48, 36): 13.89, (48, 37): 51.86, (48, 38): 56.09, (48, 39): 43.49, (48, 40): 39.18, (48, 41): 35.99, (48, 42): 33.85, (48, 43): 30.07, (48, 44): 15.97, (48, 45): 32.49, (48, 46): 11.21, (48, 47): 16.12, (48, 48): 0.0, (48, 0): 47.51,
    (0, 1): 65.38, (0, 2): 51.2, (0, 3): 44.06, (0, 4): 67.58, (0, 5): 89.72, (0, 6): 104.97, (0, 7): 69.36, (0, 8): 98.05, (0, 9): 93.77, (0, 10): 86.84, (0, 11): 102.27, (0, 12): 80.47, (0, 13): 45.39, (0, 14): 67.7, (0, 15): 100.58, (0, 16): 117.2, (0, 17): 77.56, (0, 18): 32.13, (0, 19): 40.85, (0, 20): 19.88, (0, 21): 66.45, (0, 22): 91.3, (0, 23): 103.84, (0, 24): 83.08, (0, 25): 79.42, (0, 26): 80.1, (0, 27): 55.86, (0, 28): 73.45, (0, 29): 81.27, (0, 30): 53.56, (0, 31): 64.72, (0, 32): 80.53, (0, 33): 94.02, (0, 34): 77.44, (0, 35): 44.41, (0, 36): 32.39, (0, 37): 76.86, (0, 38): 80.99, (0, 39): 67.94, (0, 40): 72.22, (0, 41): 72.21, (0, 42): 68.66, (0, 43): 71.42, (0, 44): 53.6, (0, 45): 68.29, (0, 46): 50.81, (0, 47): 53.84, (0, 48): 47.51, (0, 0): 0.0,
}

#d_ij = d_ij1/100


d_m0 = {(1,0): 1560,  (2,0): 1950,  (3,0): 1080, (4,0): 1400}
c_k = {1: 0.7, 2: 0.7, 3: 1.2, 4: 1.2}  # Correction factor that converts the distance traveled into the cost for each vehicle k in K
theta_ml = {(1, 1): 38, (1, 2): 27, (1, 3): 37, (2, 1): 10, (2, 2): 14, (2, 3): 17, (3, 1): 22, (3, 2): 17, (3, 3): 24, (4, 1): 20, (4, 2): 11, (4, 3): 23}  # Acquisition cost for each commodity l in L from plant m in M
e_ijk = {(i, j, k): 0.5 for i in I for j in I if i != j for k in K}  # Conversion factor used to reflect the carbon emissions within arc ij of vehicle k in K per unit distance
varepsilon = {m: 0.1 for m in M}   # Carbon emissions per unit distance caused by shipping commodities from a plant to the depot
q_k_max = {1: 100, 2: 100, 3: 200, 4: 200}  # Available capacity associated with vehicle k in K
r_max = 8 # Maximum duration of the route
varphi = {i: 0.3 for i in I}  # Factor that converts distance to time
h_i1 = {1: 20,  2: 24,  3: 12,  4: 10,  5: 13,  6: 4, 7: 6, 8: 8, 9: 7, 10: 13,  11: 5, 12: 17, 13: 14, 14: 8, 15: 5,  16: 13, 17: 12, 18: 2,  19: 10, 20: 20,  21: 16, 22: 9,  23: 9,  24: 16, 25: 6,   26: 18, 27: 1,  28: 1,  29: 4,  30: 14,   31: 23, 32: 6,  33: 6,  34: 15, 35: 24,   36: 8,  37: 8,  38: 1,  39: 10, 40: 3,   41: 3,  42: 23, 43: 2,  44: 6,  45: 17,   46: 6,  47: 16, 48: 3}  # Service time at node i in I
#h_i = h_i1/60

#t_ij = {(i, j): 0.1 for i in I for j in I if i != j if j != 0}  # Travel time from customer j in J to node i in I
#t_ij = d_ij*varphi + h_i
gamma = 49  # Sufficiently large positive constant
g_min = 2500  # Minimum profit imposed by the leader

Lambda = 37
# Define Sets and Indice

Omega_jh = {(j, h): 0 for j in J for h in H}

# Randomly assign each customer to exactly one hub
for j in J:
    # Randomly choose a hub for this customer
    assigned_hub = random.randint(1, len(H))
    Omega_jh[(j, assigned_hub)] = random.randint(0, 1)


common = {
    (1, 1): 120, (1, 2): 120, (1, 3): 140, (1, 4): 140,
    (2, 1): 120, (2, 2): 120, (2, 3): 140, (2, 4): 140,
    (3, 1): 120, (3, 2): 120, (3, 3): 140, (3, 4): 140,
    (4, 1): 120, (4, 2): 120, (4, 3): 140, (4, 4): 140,
    (5, 1): 120, (5, 2): 120, (5, 3): 140, (5, 4): 140,
    (6, 1): 110, (6, 2): 110, (6, 3): 120, (6, 4): 120,
    (7, 1): 120, (7, 2): 120, (7, 3): 140, (7, 4): 140,
    (8, 1): 110, (8, 2): 110, (8, 3): 120, (8, 4): 120,
    (9, 1): 120, (9, 2): 120, (9, 3): 140, (9, 4): 140,
    (10, 1): 120, (10, 2): 120, (10, 3): 140, (10, 4): 140,
    (11, 1): 100, (11, 2): 100, (11, 3): 120, (11, 4): 120,
    (12, 1): 120, (12, 2): 120, (12, 3): 140, (12, 4): 140,
    (13, 1): 120, (13, 2): 120, (13, 3): 140, (13, 4): 140,
    (14, 1): 110, (14, 2): 110, (14, 3): 130, (14, 4): 130,
    (15, 1): 120, (15, 2): 120, (15, 3): 140, (15, 4): 140,
    (16, 1): 120, (16, 2): 120, (16, 3): 140, (16, 4): 140,
    (17, 1): 120, (17, 2): 120, (17, 3): 140, (17, 4): 140,
    (18, 1): 110, (18, 2): 110, (18, 3): 120, (18, 4): 120,
    (19, 1): 100, (19, 2): 100, (19, 3): 120, (19, 4): 120,
    (20, 1): 100, (20, 2): 100, (20, 3): 120, (20, 4): 120,
    (21, 1): 110, (21, 2): 110, (21, 3): 140, (21, 4): 140,
    (22, 1): 120, (22, 2): 120, (22, 3): 140, (22, 4): 140,
    (23, 1): 120, (23, 2): 120, (23, 3): 140, (23, 4): 140,
    (24, 1): 120, (24, 2): 120, (24, 3): 140, (24, 4): 140,
    (25, 1): 120, (25, 2): 120, (25, 3): 140, (25, 4): 140,
    (26, 1): 110, (26, 2): 110, (26, 3): 120, (26, 4): 120,
    (27, 1): 120, (27, 2): 120, (27, 3): 140, (27, 4): 140,
    (28, 1): 110, (28, 2): 110, (28, 3): 120, (28, 4): 120,
    (29, 1): 120, (29, 2): 120, (29, 3): 140, (29, 4): 140,
    (30, 1): 120, (30, 2): 120, (30, 3): 140, (30, 4): 140,
    (31, 1): 100, (31, 2): 100, (31, 3): 120, (31, 4): 120,
    (32, 1): 100, (32, 2): 100, (32, 3): 120, (32, 4): 120,
    (33, 1): 120, (33, 2): 120, (33, 3): 140, (33, 4): 140,
    (34, 1): 110, (34, 2): 110, (34, 3): 140, (34, 4): 140,
    (35, 1): 120, (35, 2): 120, (35, 3): 140, (35, 4): 140,
    (36, 1): 120, (36, 2): 120, (36, 3): 140, (36, 4): 140,
    (37, 1): 120, (37, 2): 120, (37, 3): 140, (37, 4): 140,
    (38, 1): 120, (38, 2): 120, (38, 3): 140, (38, 4): 140,
    (39, 1): 110, (39, 2): 110, (39, 3): 140, (39, 4): 140,
    (40, 1): 100, (40, 2): 100, (40, 3): 120, (40, 4): 120
}

f_jlk = {}
for j in J:
    for l in L:
        for k in K:
            f_jlk[j, l, k] = common[j, k]

            
# Divide d_ij1 values by 100
d_ij = {key: value / 100 for key, value in d_ij1.items()}

# Divide h_i1 values by 60 to convert minutes to hours
h_i = {key: value / 60 for key, value in h_i1.items()}

# Update t_ij calculation to include the corrected h_i
# Assuming varphi is applied correctly as a scaling factor for d_ij to time, and h_i adds a fixed service time at node i
t_ij = {key: d_ij[key] * varphi[key[1]] + h_i[key[1]] if key[1] in h_i else d_ij[key] * varphi[key[1]] for key in d_ij}
            
            


# In[124]:


import pulp
import numpy as np

def customer_selection(J, L, K, H, p_l, f_jlk, delta_jl, Omega_jh, Lambda):
    # Initialize decision variable X
    X = {j: 0 for j in J}
    best_profit = -np.inf
    best_X = None
    
    # Initialize an initial solution randomly
    selected_customers = random.sample(J, Lambda)
    for j in selected_customers:
        X[j] = 1
    
    # Calculate the initial profit
    profit = sum(p_l[l] + f_jlk[j, l, k]*(1-Omega_jh[j, h])*delta_jl[j, l] 
                 for j in J for l in L for k in K for h in H if X[j] == 1)
    if profit > best_profit:
        best_profit = profit
        best_X = X.copy()
    
    # Generate all possible combinations of (0,1) in X
    for j in J:
        X_temp = X.copy()
        X_temp[j] = 1 - X_temp[j]  # Toggle the selection of customer j
        profit_temp = sum(p_l[l] + f_jlk[j, l, k]*(1-Omega_jh[j, h])*delta_jl[j, l] 
                          for j in J for l in L for k in K for h in H if X_temp[j] == 1)
        
        # If the new profit is better, update best_X and best_profit
        if profit_temp > best_profit:
            best_profit = profit_temp
            best_X = X_temp.copy()
    
    return best_X


# In[125]:


best_X = customer_selection(J, L, K, H, p_l, f_jlk, delta_jl, Omega_jh, Lambda)


# In[126]:


import pulp

def manufacturing_facility_selection_and_production_assignment(X, M, L, J, beta_ml, rho_m, epsilon_ml, mu_l, delta_jl, s_m_max, pi_m_max):
    V = set()
    U = {(m, l): 0 for m in M for l in L}  # Initialize production quantity as zero
    
    # Initialize the problem
    follower_problem = pulp.LpProblem("Manufacturing_Facility_Selection", pulp.LpMinimize)
    
    # Define decision variables for production quantities and plant selection
    u = pulp.LpVariable.dicts("production_quantity", ((m, l) for m in M for l in L), lowBound=0, cat='Continuous')
    v = pulp.LpVariable.dicts("plant_selection", (m for m in M), cat='Binary')
    
    # Calculate consolidated demand for each commodity based on selected customers
    consolidated_demand = {l: sum(delta_jl[j, l] for j in J if X[j] == 1) for l in L}
    
    # Simplified version: Assign all production to the plant with the lowest beta_ml + rho_m for each l
    for l in L:
        min_cost_plant = min(M, key=lambda m: beta_ml[m, l] + rho_m[m])
        U[min_cost_plant, l] = consolidated_demand[l]
        V.add(min_cost_plant)
    
    # Constraints
    # Carbon emissions constraint
    for m in M:
        follower_problem += pulp.lpSum(epsilon_ml[m, l] * u[(m, l)] for l in L) <= s_m_max[m], f"CarbonEmission_{m}"
    
    # Demand satisfaction constraint (assuming your demand calculation matches production)
    for l in L:
        follower_problem += pulp.lpSum(u[(m, l)] for m in M) == consolidated_demand[l], f"DemandSatisfaction_{l}"
    
    # Raw material constraint
    for m in M:
        follower_problem += pulp.lpSum(mu_l[l] * u[(m, l)] for l in L) <= pi_m_max[m] * v[m], f"RawMaterial_{m}"
    
    # Note: This corrected version assumes the decision variables `u` and `v` are properly integrated into your model
    # and that `follower_problem` is where you're adding your constraints and objective.
    
    # You should define an objective for your `follower_problem` and solve it using follower_problem.solve().
    
    return V, U


# In[127]:


best_u_v = manufacturing_facility_selection_and_production_assignment(best_X, M, L, J, beta_ml, rho_m, epsilon_ml, mu_l, delta_jl, s_m_max, pi_m_max)

# Initialize the dictionary with all facilities set to not used (0)
v_dict = {m: 0 for m in M}

# Update the dictionary for active facilities to set them as used (1)
for m in best_u_v[0]:
    v_dict[m] = 1


# In[128]:


def determine_customer_hub(Omega_jh, H):
    """
    Determine the hub selected by each customer based on Omega_jh.
    Parameters:
    - Omega_jh: Dictionary with keys as (j, h) and values indicating selection (1 or 0).
    - H: List of hubs.
    
    Returns:
    - customer_to_hub: Dictionary mapping each customer to their chosen hub location.
    """
    customer_to_hub = {}
    for (j, h), selection in Omega_jh.items():
        if selection == 1:
            customer_to_hub[j] = h
    return customer_to_hub


# In[129]:


def calculate_savings(I, d_ij, x, Omega_jh, H):
    """
    Calculate savings for combining two selected customers, considering hub assignments.
    Parameters:
    - I: Set including customers and hubs.
    - d_ij: Distance matrix.
    - x: Dictionary indicating whether a customer is selected (1) or not (0).
    - Omega_jh: Customer preferences for hubs.
    - H: List of hubs.
    """
    customer_to_hub = determine_customer_hub(Omega_jh, H)  # Determine hubs for customers
    savings = {}
    for i in I:
        location_i = customer_to_hub.get(i, i)  # Use hub's location if customer chose a hub, else use customer's location

        for j in I:
            location_j = customer_to_hub.get(j, j)  # Same for customer j

            if i != j and i > 0 and j > 0 and x.get(i, 0) == 1 and x.get(j, 0) == 1:  # Only consider selected customers
                savings[(i, j)] = d_ij[(0, location_i)] + d_ij[(0, location_j)] - d_ij[(location_i, location_j)]
    return savings


# In[130]:


def calculate_total_demand_per_customer(delta_jl, J, L):
    """Calculate total demand for each customer across all commodities."""
    total_demand_per_customer = {j: sum(delta_jl.get((j, l), 0) for l in L) for j in J}
    return total_demand_per_customer


# In[131]:


def vehicle_routing_assignment_with_time_constraint(I, J, K, d_ij, q_k_max, L, delta_jl, x, u, v, Omega_jh, H, t_ij, r_max):
    # Calculate total demand for each customer
    total_demand_per_customer = calculate_total_demand_per_customer(delta_jl, J, L)
    
    # Initialize structures for routing with time consideration
    routes = {k: [] for k in K}
    load = {k: 0 for k in K}
    time_spent = {k: 0 for k in K}  # Initialize time spent on each route
    used_vehicles = set()
    customer_route = {j: None for j in J if x[j] == 1}  # Only consider selected customers

    # Calculate savings with consideration for customer selection and hub assignments
    savings = calculate_savings(I, d_ij, x, Omega_jh, H)
    sorted_savings = sorted(savings.items(), key=lambda x: x[1], reverse=True)

    # Assign routes based on savings, vehicle capacity, and time constraints
    for (i, j), saving in sorted_savings:
        for k in K:
            if customer_route[i] is None and customer_route[j] is None:
                total_demand_i = total_demand_per_customer.get(i, 0)
                total_demand_j = total_demand_per_customer.get(j, 0)
                if load[k] + total_demand_i + total_demand_j <= q_k_max[k]:
                    # Check if adding these customers respects the time constraint
                    additional_time = t_ij.get((0, i), 0) + t_ij.get((i, j), 0) + t_ij.get((j, 0), 0)
                    if time_spent[k] + additional_time <= r_max:
                        routes[k].append(i)
                        routes[k].append(j)
                        load[k] += total_demand_i + total_demand_j
                        time_spent[k] += additional_time
                        customer_route[i] = k
                        customer_route[j] = k
                        used_vehicles.add(k)
                        break  # Vehicle found for the pair

    # Attempt to add remaining selected customers to existing routes, considering time
    for j in J:
        if x[j] == 1 and customer_route[j] is None:
            total_demand_j = total_demand_per_customer.get(j, 0)
            for k in K:
                if load[k] + total_demand_j <= q_k_max[k]:
                    # Check time constraint for adding this customer
                    additional_time = t_ij.get((0, j), 0) + t_ij.get((j, 0), 0)
                    if time_spent[k] + additional_time <= r_max:
                        routes[k].append(j)
                        load[k] += total_demand_j
                        time_spent[k] += additional_time
                        customer_route[j] = k
                        used_vehicles.add(k)
                        break

    # Report if any selected customers could not be assigned
    unassigned_customers = [j for j, route in customer_route.items() if route is None]
    if unassigned_customers:
        print(f"Warning: Not all selected customers could be assigned to routes. Unassigned customers: {unassigned_customers}")

    return routes, used_vehicles


# In[132]:


routes, used_vehicles = vehicle_routing_assignment_with_time_constraint(I, J, K, d_ij, q_k_max, L, delta_jl, best_X, best_u_v[1], v_dict, Omega_jh, H, t_ij, r_max)


# In[133]:


def enhanced_routing_output(routes, customer_to_hub):
    """
    Enhance the routing output to include information about hub assignments for customers.
    
    Parameters:
    - routes: Dictionary of routes per vehicle.
    - customer_to_hub: Dictionary mapping customers to their chosen hub.
    
    Returns:
    - A dictionary with detailed routing information including hub assignments.
    """
    detailed_routes = {}
    for k, route in routes.items():
        route_details = []
        for customer_or_hub in route:
            if customer_or_hub in customer_to_hub:
                # Customer is assigned to a hub
                hub = customer_to_hub[customer_or_hub]
                route_details.append({'customer': customer_or_hub, 'hub': hub})
            else:
                # Direct delivery to customer or a hub itself
                route_details.append({'direct': customer_or_hub})
        detailed_routes[k] = route_details
    
    return detailed_routes


# In[138]:


customer_to_hub = determine_customer_hub(Omega_jh, H)
enhanced_output = enhanced_routing_output(routes, customer_to_hub)
enhanced_output


# In[139]:


def generate_initial_solution():
    # Step 1: Customer selection
    X = customer_selection(J, L, K, H, p_l, f_jlk, delta_jl, Omega_jh, Lambda)
    
    # Step 2: Manufacturing facility selection and production assignment
    V, U = manufacturing_facility_selection_and_production_assignment(X, M, L, J, beta_ml, rho_m, epsilon_ml, mu_l, delta_jl, s_m_max, pi_m_max)
    
    # Convert set V to dict for compatibility
    V_dict = {m: (1 if m in V else 0) for m in M}
    
    # Step 3: Vehicle routing assignment with time constraint
    routes, used_vehicles_set = vehicle_routing_assignment_with_time_constraint(I, J, K, d_ij, q_k_max, L, delta_jl, X, U, V_dict, Omega_jh, H, t_ij, r_max)
    
    used_vehicles = {k: 1 if k in used_vehicles_set else 0 for k in K}

    
    manufacturing_costs = calculate_follower_objective(M, L, beta_ml, rho_m, U, V_dict)
    profit = calculate_profit(I, J, H, K, L, M, p_l, f_jlk, delta_jl, Omega_jh, r_k, routes, c_k, theta_ml, U, X, used_vehicles)
    emissions = calculate_emissions(I, K, M, L, e_ijk, d_ij, routes, epsilon_ml, U, varepsilon, d_m0, V_dict)
    
    
    # Combine all parts of the solution
    initial_solution = {
        'x': X,
        'v': V_dict,
        'u': U,
        'y': routes,
        'z': used_vehicles,
        
        # Initial objective values can be calculated based on the initial decision variables
        "emissions_value": emissions,
        "profit_value": profit,
        "follower_objective": manufacturing_costs
    }
    
    return initial_solution


# In[140]:


def extract_objective_values(solutions, I, J, H, K, L, M, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m):
    solutions_list = [solutions]
    objective_values = {'L_emissions': [], 'L_profit': [], 'follower_objective': []}
    
    for solution in solutions_list:
        # Decompose the solution into its components
        y = solution['y']
        u = solution['u']
        v = solution['v']
        x = solution['x']
        z = solution['z']

        # Calculate each objective value
        emissions_value = calculate_emissions(I, K, M, L, e_ijk, d_ij, y, epsilon_ml, u, varepsilon, d_m0, v)
        profit_value = calculate_profit(I, J, H, K, L, M, p_l, f_jlk, delta_jl, Omega_jh, r_k, y, c_k, theta_ml, u, x, z)
        follower_value = calculate_follower_objective(M, L, beta_ml, rho_m, u, v)

        # Append the calculated values to the respective lists in the dictionary
        objective_values['L_emissions'].append(emissions_value)
        objective_values['L_profit'].append(profit_value)
        objective_values['follower_objective'].append(follower_value)
    
    return objective_values


def calculate_emissions(I, K, M, L, e_ijk, d_ij, y, epsilon_ml, u, varepsilon, d_m0, v):
    emissions = 0
    # Sum emissions for transportation
    for i in I:
        for i_prime in I:
            if i != i_prime:
                for k in K:
                    e_value = e_ijk.get((i, i_prime, k), 0)
                    d_value = d_ij.get((i, i_prime), 0)
                    y_value = y.get((i, i_prime, k), 0)
                    emissions += e_value * d_value * y_value
    # Sum emissions for manufacturing
    for m in M:
        for l in L:
            epsilon_value = epsilon_ml.get((m, l), 0)  # Default to 0 if not found
            u_value = u.get((m, l), 0)  # Default to 0 if not found
            emissions += epsilon_value * u_value
            
    # Sum emissions for transporting goods from manufacturing to depot
    for m in M:
        average_emissions_factor = 0.1  # This should be based on your data or assumptions
        emissions_factor = varepsilon.get(m, average_emissions_factor)
        d_m0_value = d_m0.get((m, 0), 0)
        emissions += emissions_factor * d_m0_value * v.get(m, 0)

    return emissions


def calculate_profit(I, J, H, K, L, M, p_l, f_jlk, delta_jl, Omega_jh, r_k, y, c_k, theta_ml, u, x, Z):
    profit = 0
    z = {vehicle_id: 1 for vehicle_id in Z}
    # Revenue from sales and delivery fees, adjusted for customer preferences for delivery mode
    for j in J:
        for l in L:
            for k in K:
                # Iterate over all H values
                for h in H:
                    # Safely get the value from f_jlk with a default of 0
                    f_jlk_value = f_jlk.get((j, l, k), 0)
                    # Calculate the profit contribution for this j, l, k combination
                    profit_contribution = (p_l[l] + f_jlk_value * (1 - Omega_jh.get((j, h), 0))) * delta_jl[j, l] * x[j]
                    profit += profit_contribution
    # Deduct costs for vehicle use
    for k in K:
        profit -= r_k[k] * z[k]
    # Deduct transportation costs, adjusted for delivery mode preference and actual route usage
    for i in I:
        for i_prime in I:
            if i != i_prime:
                for k in K:
                    for j in J:
                        for h in H:
                            profit -= c_k[k] * d_ij[i, i_prime] * y.get((i, i_prime, k), 0) * (1 - Omega_jh.get((j, h), 0))
    # Deduct manufacturing costs
    for m in M:
        for l in L:
            profit -= theta_ml[m, l] * u[m, l]
    return profit


def calculate_follower_objective(M, L, beta_ml, rho_m, u, v):
    # Manufacturing cost minimization objective
    manufacturing_costs = 0
    for m in M:
        for l in L:
            manufacturing_costs += beta_ml[m, l] * u.get((m, l), 0)
        manufacturing_costs += rho_m[m] * v.get(m, 0)

    return manufacturing_costs





# In[164]:


solutions = generate_initial_solution()
extract_objective_values(solutions, I, J, H, K, L, M, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m)


# In[19]:


def swap(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Make a deep copy of the solution to avoid unintended modifications
    new_solution = deepcopy(solution)
    routes = new_solution['y']

    # Convert routes from a dict to a list of (vehicle, route) tuples to easily select routes
    vehicle_route_list = list(routes.items())
    
    if len(vehicle_route_list) < 2:
        # No swap possible if there are less than two routes
        return new_solution, False

    # Select two different routes randomly
    v1, v2 = np.random.choice(range(len(vehicle_route_list)), 2, replace=False)
    route1_vehicle, route1 = vehicle_route_list[v1]
    route2_vehicle, route2 = vehicle_route_list[v2]

    # Check if routes have at least one customer
    if not route1 or not route2:
        return new_solution, False  # No swap if any route is empty

    # Select a random customer from each route
    customer1 = np.random.choice(route1)
    customer2 = np.random.choice(route2)

    # Perform the swap
    route1_idx = route1.index(customer1)
    route2_idx = route2.index(customer2)
    route1[route1_idx], route2[route2_idx] = customer2, customer1

    # No need to update 'x', 'v', 'u', or 'z' as they are not directly affected by customer swap within routes
    # No recalculations of objective values ('emissions_value', 'profit_value', 'follower_objective') are performed here

    return new_solution, True


# In[20]:


def cross_exchange(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Make a deep copy of the solution to avoid unintended modifications
    new_solution = deepcopy(solution)
    routes = new_solution['y']

    # Convert routes from a dict to a list of (vehicle, route) tuples to easily select routes
    vehicle_route_list = list(routes.items())
    
    if len(vehicle_route_list) < 2:
        # No cross-exchange possible if there are less than two routes
        return new_solution, False

    # Select two different routes randomly
    v1, v2 = np.random.choice(range(len(vehicle_route_list)), 2, replace=False)
    route1_vehicle, route1 = vehicle_route_list[v1]
    route2_vehicle, route2 = vehicle_route_list[v2]

    # Check if both routes have at least two customers to exchange segments
    if len(route1) < 2 or len(route2) < 2:
        return new_solution, False  # No exchange if any route has fewer than two customers

    # Determine segments to exchange
    start1, end1 = sorted(np.random.choice(range(len(route1)), 2, replace=False))
    start2, end2 = sorted(np.random.choice(range(len(route2)), 2, replace=False))
    end1 += 1  # Adjust for Python slicing
    end2 += 1

    # Perform the cross-exchange
    segment1 = route1[start1:end1]
    segment2 = route2[start2:end2]
    new_route1 = route1[:start1] + segment2 + route1[end1:]
    new_route2 = route2[:start2] + segment1 + route2[end2:]

    # Update the solution with the new routes
    new_solution['y'][route1_vehicle] = new_route1
    new_solution['y'][route2_vehicle] = new_route2

    # Since only the routing part is changed, 'x', 'v', 'u', and 'z' remain unaffected
    # No recalculations of 'emissions_value', 'profit_value', 'follower_objective'

    return new_solution, True


# In[21]:


def relocate(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Make a deep copy of the solution to avoid unintended modifications
    new_solution = deepcopy(solution)
    routes = new_solution['y']

    # Convert routes from a dict to a list of (vehicle, route) tuples to easily select routes
    vehicle_route_list = list(routes.items())

    if len(vehicle_route_list) < 2:
        # No relocation possible if there are less than two routes
        return new_solution, False

    # Randomly choose a source route from which to relocate a customer
    source_index = np.random.choice(len(vehicle_route_list))
    source_vehicle, source_route = vehicle_route_list[source_index]

    if not source_route:
        return new_solution, False  # No improvement if source route is empty

    # Randomly select a customer from the source route
    customer_index = np.random.choice(len(source_route))
    customer = source_route[customer_index]

    # Remove the customer from the source route
    new_source_route = source_route[:customer_index] + source_route[customer_index+1:]

    # Randomly choose a target route to add the selected customer
    target_indices = [i for i in range(len(vehicle_route_list)) if i != source_index]
    target_index = np.random.choice(target_indices)
    target_vehicle, target_route = vehicle_route_list[target_index]

    # Add the customer to the target route
    new_target_route = target_route + [customer]

    # Update the solution with modified routes
    new_solution['y'][source_vehicle] = new_source_route
    new_solution['y'][target_vehicle] = new_target_route

    # Since only the routing part is changed, 'x', 'v', 'u', and 'z' remain unaffected
    # No recalculations of 'emissions_value', 'profit_value', 'follower_objective'

    return new_solution, True


# In[22]:


def reversal(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Make a deep copy of the solution to avoid unintended modifications
    new_solution = deepcopy(solution)
    routes = new_solution['y']

    # Convert routes from a dict to a list of (vehicle, route) tuples to easily select a route
    vehicle_route_list = list(routes.items())

    if not vehicle_route_list:
        return new_solution, False  # No routes to reverse

    # Randomly select a vehicle and its route for reversal
    vehicle, route = random.choice(vehicle_route_list)

    if len(route) < 2:
        return new_solution, False  # No improvement if route is too short

    # Randomly select start and end points for the segment to reverse
    start, end = sorted(random.sample(range(len(route)), 2))
    end += 1  # Include the end in the segment

    # Reverse the selected segment
    route_to_reverse = route[start:end]
    reversed_route_segment = route_to_reverse[::-1]

    # Update the route with the reversed segment
    new_route = route[:start] + reversed_route_segment + route[end:]
    new_solution['y'][vehicle] = new_route

    # Since only the routing part is changed, 'x', 'v', 'u', and 'z' remain unaffected
    # No recalculations of 'emissions_value', 'profit_value', 'follower_objective'

    return new_solution, True


# In[23]:


import numpy as np
from copy import deepcopy

def exchange(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Adjusted to use 'y' for vehicle routing and include placeholders for vehicle types and capacities
    vehicle_routing = solution['y']  # Assuming 'y' represents routes and vehicles
    vehicle_types = {v: 'K1' for v in vehicle_routing}  # Placeholder: Adjust as necessary
    vehicle_capacities = {'K1': 100, 'K2': 200}  # Placeholder: Adjust as necessary

    vehicles = list(vehicle_routing.keys())

    # Select two vehicles randomly
    if len(vehicles) < 2:
        return solution, False  # No exchange possible with less than two vehicles

    v1, v2 = np.random.choice(vehicles, 2, replace=False)

    # Check if the exchange respects vehicle-specific constraints (e.g., capacity)
    if vehicle_types[v1] != vehicle_types[v2] and        not are_capacities_compatible(solution, v1, v2, vehicle_types, vehicle_capacities):
        return solution, False  # Exchange not feasible due to incompatible capacities

    # Perform the exchange
    new_solution = deepcopy(solution)
    new_solution['y'][v1], new_solution['y'][v2] = vehicle_routing[v2], vehicle_routing[v1]

    return new_solution, True

def are_capacities_compatible(solution, v1, v2, vehicle_types, vehicle_capacities):
    route_v1 = solution['y'][v1]
    route_v2 = solution['y'][v2]

    # Assuming you have a way to calculate the demand for each route
    total_demand_v1 = calculate_total_demand_for_route(route_v1, solution)
    total_demand_v2 = calculate_total_demand_for_route(route_v2, solution)

    capacity_v1 = vehicle_capacities[vehicle_types[v1]]
    capacity_v2 = vehicle_capacities[vehicle_types[v2]]

    return total_demand_v1 <= capacity_v2 and total_demand_v2 <= capacity_v1

def calculate_total_demand_for_route(route, solution):
    # Assuming 'delta_jl' is a dictionary in 'solution' that maps (customer_id, commodity_id) to demand
    # and each route consists of customer IDs.
    # If your demand data structure is different, adjust this implementation accordingly.
    
    total_demand = 0
    for customer_id in route:
        # Assuming each customer might demand multiple commodities and you sum up all demands.
        # This loops over all commodities for a given customer and sums their demands.
        for commodity_id in solution['delta_jl'].keys():
            if (customer_id, commodity_id) in solution['delta_jl']:
                total_demand += solution['delta_jl'][(customer_id, commodity_id)]
    return total_demand


# In[24]:


def variable_neighborhood_descent(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    operators = [swap, cross_exchange, exchange, relocate, reversal]
    improved = False

    # Iterate through each operator until an improvement is found or all operators have been tried
    for operator in operators:
        new_solution_candidate, improved_operator = operator(solution.copy(), I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml)
        
        # Recalculate objective values for the new solution candidate
        new_objective_values = extract_objective_values(new_solution_candidate, I, J, H, K, L, M, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m)
        new_solution_candidate['emissions_value'], new_solution_candidate['profit_value'], new_solution_candidate['follower_objective'] = new_objective_values['L_emissions'][0], new_objective_values['L_profit'][0], new_objective_values['follower_objective'][0]

        # Check for improvement based on the specific criteria
        if is_improved(solution, new_solution_candidate):
            # If improvement found, update the solution and mark as improved
            solution = new_solution_candidate
            improved = True
            break  # Exit the loop as soon as an improvement is found

    # If no improvement is found by any operator, the loop ends and the original solution is returned
    return solution, improved


def is_improved(current_solution, new_solution_candidate):
    # Check if emissions are reduced
    emissions_improved = new_solution_candidate['emissions_value'] - current_solution['emissions_value'] < 1
    
    # Check if profit is increased
    profit_improved = new_solution_candidate['profit_value'] - current_solution['profit_value'] > 1
    
    # Check if manufacturing costs are reduced
    manufacturing_costs_improved = new_solution_candidate['follower_objective'] - current_solution['follower_objective'] < 1
    
    # Determine improvement based on the objectives
    # This example assumes all objectives are equally important
    # You might need to adjust this logic based on your specific problem's needs
    improvement = emissions_improved or profit_improved or manufacturing_costs_improved
    
    return improvement


def update_solution_with_new_objective_values(solution, objective_values):
    # Update solution dictionary with new objective values
    solution['emissions_value'] = objective_values['L_emissions'][0]
    solution['profit_value'] = objective_values['L_profit'][0]
    solution['follower_objective'] = objective_values['follower_objective'][0]
    return solution


# In[25]:


initial_solution = generate_initial_solution()  # Ensure this includes initial values for x, y, u, v, z


# In[26]:


extract_objective_values(initial_solution, I, J, H, K, L, M, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m)


# In[27]:


import numpy as np
from copy import deepcopy
import random

def perturb(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml):
    # Create a deep copy of the solution to modify
    new_solution = deepcopy(solution)
    
    # Example perturbation: Toggle a subset of customer selections (x)
    customers_to_toggle = random.sample(new_solution['x'].keys(), k=int(len(new_solution['x']) * 0.1))  # Toggle 10% of customers
    for customer in customers_to_toggle:
        new_solution['x'][customer] = 1 if new_solution['x'][customer] == 0 else 0
    
    # Example perturbation: Toggle a subset of vehicle usages (z)
    vehicles_to_toggle = random.sample(new_solution['z'].keys(), k=int(len(new_solution['z']) * 0.1))  # Toggle 10% of vehicles
    for vehicle in vehicles_to_toggle:
        new_solution['z'][vehicle] = 1 if new_solution['z'][vehicle] == 0 else 0
    
    # Note: Depending on the constraints of your problem, you may need to ensure
    # that the perturbed solution is still feasible. This example does not account for feasibility.

    # Apply other significant changes as needed based on your problem's context

    return new_solution


# In[28]:


def iterated_local_search(initial_solution, max_iterations, max_no_improvement, I, K, M, L, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m):
    solution = initial_solution
    no_improvement_iterations = 0
    total_iterations = 0

    while total_iterations < max_iterations and no_improvement_iterations < max_no_improvement:
        print(f"Total iterations: {total_iterations}, Iterations without improvement: {no_improvement_iterations}")

        new_solution, improved = variable_neighborhood_descent(solution, I, J, K, L, M, H, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml)

        # Calculate objective values for new_solution
        new_solution['emissions_value'] = calculate_emissions(I, K, M, L, e_ijk, d_ij, new_solution['y'], epsilon_ml, new_solution['u'], varepsilon, d_m0, new_solution['v'])
        new_solution['profit_value'] = calculate_profit(I, J, H, K, L, M, p_l, f_jlk, delta_jl, Omega_jh, r_k, new_solution['y'], c_k, theta_ml, new_solution['u'], new_solution['x'], new_solution['z'])
        new_solution['follower_objective'] = calculate_follower_objective(M, L, beta_ml, rho_m, new_solution['u'], new_solution['v'])

        if improved:
            solution = new_solution
            no_improvement_iterations = 0  # Reset counter on improvement
        else:
            solution = perturb(solution)
            no_improvement_iterations += 1
        
        total_iterations += 1
    
    # Ensure final solution includes objective values
    solution['emissions_value'] = calculate_emissions(I, K, M, L, e_ijk, d_ij, solution['y'], epsilon_ml, solution['u'], varepsilon, d_m0, solution['v'])
    solution['profit_value'] = calculate_profit(I, J, H, K, L, M, p_l, f_jlk, delta_jl, Omega_jh, r_k, solution['y'], c_k, theta_ml, solution['u'], solution['x'], solution['z'])
    solution['follower_objective'] = calculate_follower_objective(M, L, beta_ml, rho_m, solution['u'], solution['v'])

    return solution, total_iterations, no_improvement_iterations


# In[29]:


initial_solution = generate_initial_solution()  # Ensure this includes initial values for x, y, u, v, z
    
    # Set maximum iterations and improvements
max_iterations = 100
max_no_improvement = 10

iterated_local_search(initial_solution, max_iterations, max_no_improvement, I, K, M, L, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m)


# In[31]:


import numpy as np
from scipy.stats import entropy

def normalize_objective_values(solutions_set):
    solutions = [solutions_set]
    # Initialize containers to hold min and max values for each objective
    min_vals = {'emissions_value': float('inf'), 'profit_value': float('inf'), 'follower_objective': float('inf')}
    max_vals = {'emissions_value': float('-inf'), 'profit_value': float('-inf'), 'follower_objective': float('-inf')}

    # Iterate through each solution to update the min and max values for each objective
    for solution in solutions:
        for objective in ['emissions_value', 'profit_value', 'follower_objective']:
            val = solution[objective]
            min_vals[objective] = min(min_vals[objective], val)
            max_vals[objective] = max(max_vals[objective], val)

    # Normalize the objective values for each solution
    normalized_solutions = []
    for solution in solutions:
        normalized_solution = {
            objective: (solution[objective] - min_vals[objective]) / (max_vals[objective] - min_vals[objective]) if max_vals[objective] != min_vals[objective] else 0
            for objective in ['emissions_value', 'profit_value', 'follower_objective']
        }
        normalized_solutions.append(normalized_solution)

    return normalized_solutions



def calculate_entropy(normalized_values):
    """
    Calculate the entropy for each objective function to determine the weights.
    """
    weights = {}
    for key in normalized_values:
        # Calculate entropy using scipy's entropy function
        e = entropy(normalized_values[key], base=2)
        weights[key] = 1 - e if e != 0 else 1  # Avoid division by zero in weight calculation
    total_weight = sum(weights.values())
    weights = {k: v / total_weight for k, v in weights.items()}  # Normalize weights
    return weights

def promethee_ii_ranking(solutions, weights):
    """
    Rank solutions using the Promethee II method.
    """
    # Example placeholder implementation, specifics depend on your solution structure
    ranked_solutions = sorted(solutions, key=lambda x: sum(weights[i] * x[i] for i in weights), reverse=True)
    return ranked_solutions



# In[32]:


from tqdm import tqdm
def main():
    
    # Initialize problem and parameters
    initial_solution = generate_initial_solution()  # Ensure this includes initial values for x, y, u, v, z
    
    # Set maximum iterations and improvements
    max_iterations = 100
    max_no_improvement = 10

    # Perform NILS
    best_solution, total_iterations, no_improvement_iterations = iterated_local_search(
        initial_solution, max_iterations, max_no_improvement, I, K, M, L, e_ijk, d_ij, epsilon_ml, varepsilon, d_m0, p_l, f_jlk, delta_jl, Omega_jh, r_k, c_k, theta_ml, beta_ml, rho_m
    )

    # Create a tqdm progress bar with the total number of iterations
    pbar = tqdm(total=total_iterations, desc="Adding Constraints")
    
    
    # Assuming best_solution now includes updated decision variables and their objective values
    # Normalize objective function values for ranking
    #normalized_values = normalize_objective_values([best_solution['emissions_value'], best_solution['profit_value'], best_solution['follower_objective']])
    #weights = calculate_entropy(normalized_values)
    #ranked_solutions = promethee_ii_ranking([best_solution], weights)

    # Output the best solution based on ranking
    print(f"Total iterations: {total_iterations}, Iterations without improvement: {no_improvement_iterations}")
    #print("Best solution after ranking:", ranked_solutions[0])
    
    #return ranked_solutions[0]

if __name__ == "__main__":
    best_solution = main()
    print("Best solution:", best_solution)


# In[ ]:


solutions['emissions_value']


# In[ ]:





